/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!*******************************************!*\
  !*** ./resources/assets/js/libs/canvg.js ***!
  \*******************************************/
eval("/*\r\n * canvg.js - Javascript SVG parser and renderer on Canvas\r\n * MIT Licensed\r\n * Gabe Lerner (gabelerner@gmail.com)\r\n * http://code.google.com/p/canvg/\r\n *\r\n * Requires: rgbcolor.js - http://www.phpied.com/rgb-color-parser-in-javascript/\r\n */\n(function () {\n  // canvg(target, s)\n  // empty parameters: replace all 'svg' elements on page with 'canvas' elements\n  // target: canvas element or the id of a canvas element\n  // s: svg string, url to svg file, or xml document\n  // opts: optional hash of options\n  //\t\t ignoreMouse: true => ignore mouse events\n  //\t\t ignoreAnimation: true => ignore animations\n  //\t\t ignoreDimensions: true => does not try to resize canvas\n  //\t\t ignoreClear: true => does not clear canvas\n  //\t\t offsetX: int => draws at a x offset\n  //\t\t offsetY: int => draws at a y offset\n  //\t\t scaleWidth: int => scales horizontally to width\n  //\t\t scaleHeight: int => scales vertically to height\n  //\t\t renderCallback: function => will call the function after the first render is completed\n  //\t\t forceRedraw: function => will call the function on every frame, if it returns true, will redraw\n  this.canvg = function (target, s, opts) {\n    // no parameters\n    if (target == null && s == null && opts == null) {\n      var svgTags = document.querySelectorAll('svg');\n\n      for (var i = 0; i < svgTags.length; i++) {\n        var svgTag = svgTags[i];\n        var c = document.createElement('canvas');\n        c.width = svgTag.clientWidth;\n        c.height = svgTag.clientHeight;\n        svgTag.parentNode.insertBefore(c, svgTag);\n        svgTag.parentNode.removeChild(svgTag);\n        var div = document.createElement('div');\n        div.appendChild(svgTag);\n        canvg(c, div.innerHTML);\n      }\n\n      return;\n    }\n\n    if (typeof target == 'string') {\n      target = document.getElementById(target);\n    } // store class on canvas\n\n\n    if (target.svg != null) target.svg.stop();\n    var svg = build(opts || {}); // on i.e. 8 for flash canvas, we can't assign the property so check for it\n\n    if (!(target.childNodes.length == 1 && target.childNodes[0].nodeName == 'OBJECT')) target.svg = svg;\n    var ctx = target.getContext('2d');\n\n    if (typeof s.documentElement != 'undefined') {\n      // load from xml doc\n      svg.loadXmlDoc(ctx, s);\n    } else if (s.substr(0, 1) == '<') {\n      // load from xml string\n      svg.loadXml(ctx, s);\n    } else {\n      // load from url\n      svg.load(ctx, s);\n    }\n  }; // see https://developer.mozilla.org/en-US/docs/Web/API/Element.matches\n\n\n  var matchesSelector;\n\n  if (typeof Element.prototype.matches != 'undefined') {\n    matchesSelector = function matchesSelector(node, selector) {\n      return node.matches(selector);\n    };\n  } else if (typeof Element.prototype.webkitMatchesSelector != 'undefined') {\n    matchesSelector = function matchesSelector(node, selector) {\n      return node.webkitMatchesSelector(selector);\n    };\n  } else if (typeof Element.prototype.mozMatchesSelector != 'undefined') {\n    matchesSelector = function matchesSelector(node, selector) {\n      return node.mozMatchesSelector(selector);\n    };\n  } else if (typeof Element.prototype.msMatchesSelector != 'undefined') {\n    matchesSelector = function matchesSelector(node, selector) {\n      return node.msMatchesSelector(selector);\n    };\n  } else if (typeof Element.prototype.oMatchesSelector != 'undefined') {\n    matchesSelector = function matchesSelector(node, selector) {\n      return node.oMatchesSelector(selector);\n    };\n  } else {\n    // requires Sizzle: https://github.com/jquery/sizzle/wiki/Sizzle-Documentation\n    // or jQuery: http://jquery.com/download/\n    // or Zepto: http://zeptojs.com/#\n    // without it, this is a ReferenceError\n    if (typeof jQuery === 'function' || typeof Zepto === 'function') {\n      matchesSelector = function matchesSelector(node, selector) {\n        return $(node).is(selector);\n      };\n    }\n\n    if (typeof matchesSelector === 'undefined') {\n      matchesSelector = Sizzle.matchesSelector;\n    }\n  } // slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js\n\n\n  var attributeRegex = /(\\[[^\\]]+\\])/g;\n  var idRegex = /(#[^\\s\\+>~\\.\\[:]+)/g;\n  var classRegex = /(\\.[^\\s\\+>~\\.\\[:]+)/g;\n  var pseudoElementRegex = /(::[^\\s\\+>~\\.\\[:]+|:first-line|:first-letter|:before|:after)/gi;\n  var pseudoClassWithBracketsRegex = /(:[\\w-]+\\([^\\)]*\\))/gi;\n  var pseudoClassRegex = /(:[^\\s\\+>~\\.\\[:]+)/g;\n  var elementRegex = /([^\\s\\+>~\\.\\[:]+)/g;\n\n  function getSelectorSpecificity(selector) {\n    var typeCount = [0, 0, 0];\n\n    var findMatch = function findMatch(regex, type) {\n      var matches = selector.match(regex);\n\n      if (matches == null) {\n        return;\n      }\n\n      typeCount[type] += matches.length;\n      selector = selector.replace(regex, ' ');\n    };\n\n    selector = selector.replace(/:not\\(([^\\)]*)\\)/g, '     $1 ');\n    selector = selector.replace(/{[^]*/gm, ' ');\n    findMatch(attributeRegex, 1);\n    findMatch(idRegex, 0);\n    findMatch(classRegex, 1);\n    findMatch(pseudoElementRegex, 2);\n    findMatch(pseudoClassWithBracketsRegex, 1);\n    findMatch(pseudoClassRegex, 1);\n    selector = selector.replace(/[\\*\\s\\+>~]/g, ' ');\n    selector = selector.replace(/[#\\.]/g, ' ');\n    findMatch(elementRegex, 2);\n    return typeCount.join('');\n  }\n\n  function build(opts) {\n    var svg = {\n      opts: opts\n    };\n    svg.FRAMERATE = 30;\n    svg.MAX_VIRTUAL_PIXELS = 30000;\n\n    svg.log = function (msg) {};\n\n    if (svg.opts['log'] == true && typeof console != 'undefined') {\n      svg.log = function (msg) {\n        console.log(msg);\n      };\n    }\n\n    ; // globals\n\n    svg.init = function (ctx) {\n      var uniqueId = 0;\n\n      svg.UniqueId = function () {\n        uniqueId++;\n        return 'canvg' + uniqueId;\n      };\n\n      svg.Definitions = {};\n      svg.Styles = {};\n      svg.StylesSpecificity = {};\n      svg.Animations = [];\n      svg.Images = [];\n      svg.ctx = ctx;\n      svg.ViewPort = new function () {\n        this.viewPorts = [];\n\n        this.Clear = function () {\n          this.viewPorts = [];\n        };\n\n        this.SetCurrent = function (width, height) {\n          this.viewPorts.push({\n            width: width,\n            height: height\n          });\n        };\n\n        this.RemoveCurrent = function () {\n          this.viewPorts.pop();\n        };\n\n        this.Current = function () {\n          return this.viewPorts[this.viewPorts.length - 1];\n        };\n\n        this.width = function () {\n          return this.Current().width;\n        };\n\n        this.height = function () {\n          return this.Current().height;\n        };\n\n        this.ComputeSize = function (d) {\n          if (d != null && typeof d == 'number') return d;\n          if (d == 'x') return this.width();\n          if (d == 'y') return this.height();\n          return Math.sqrt(Math.pow(this.width(), 2) + Math.pow(this.height(), 2)) / Math.sqrt(2);\n        };\n      }();\n    };\n\n    svg.init(); // images loaded\n\n    svg.ImagesLoaded = function () {\n      for (var i = 0; i < svg.Images.length; i++) {\n        if (!svg.Images[i].loaded) return false;\n      }\n\n      return true;\n    }; // trim\n\n\n    svg.trim = function (s) {\n      return s.replace(/^\\s+|\\s+$/g, '');\n    }; // compress spaces\n\n\n    svg.compressSpaces = function (s) {\n      return s.replace(/[\\s\\r\\t\\n]+/gm, ' ');\n    }; // ajax\n\n\n    svg.ajax = function (url) {\n      var AJAX;\n\n      if (window.XMLHttpRequest) {\n        AJAX = new XMLHttpRequest();\n      } else {\n        AJAX = new ActiveXObject('Microsoft.XMLHTTP');\n      }\n\n      if (AJAX) {\n        AJAX.open('GET', url, false);\n        AJAX.send(null);\n        return AJAX.responseText;\n      }\n\n      return null;\n    }; // parse xml\n\n\n    svg.parseXml = function (xml) {\n      if (typeof Windows != 'undefined' && typeof Windows.Data != 'undefined' && typeof Windows.Data.Xml != 'undefined') {\n        var xmlDoc = new Windows.Data.Xml.Dom.XmlDocument();\n        var settings = new Windows.Data.Xml.Dom.XmlLoadSettings();\n        settings.prohibitDtd = false;\n        xmlDoc.loadXml(xml, settings);\n        return xmlDoc;\n      } else if (window.DOMParser) {\n        var parser = new DOMParser();\n        return parser.parseFromString(xml, 'text/xml');\n      } else {\n        xml = xml.replace(/<!DOCTYPE svg[^>]*>/, '');\n        var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');\n        xmlDoc.async = 'false';\n        xmlDoc.loadXML(xml);\n        return xmlDoc;\n      }\n    };\n\n    svg.Property = function (name, value) {\n      this.name = name;\n      this.value = value;\n    };\n\n    svg.Property.prototype.getValue = function () {\n      return this.value;\n    };\n\n    svg.Property.prototype.hasValue = function () {\n      return this.value != null && this.value !== '';\n    }; // return the numerical value of the property\n\n\n    svg.Property.prototype.numValue = function () {\n      if (!this.hasValue()) return 0;\n      var n = parseFloat(this.value);\n\n      if ((this.value + '').match(/%$/)) {\n        n = n / 100.0;\n      }\n\n      return n;\n    };\n\n    svg.Property.prototype.valueOrDefault = function (def) {\n      if (this.hasValue()) return this.value;\n      return def;\n    };\n\n    svg.Property.prototype.numValueOrDefault = function (def) {\n      if (this.hasValue()) return this.numValue();\n      return def;\n    }; // color extensions\n    // augment the current color value with the opacity\n\n\n    svg.Property.prototype.addOpacity = function (opacityProp) {\n      var newValue = this.value;\n\n      if (opacityProp.value != null && opacityProp.value != '' && typeof this.value == 'string') {\n        // can only add opacity to colors, not patterns\n        var color = new RGBColor(this.value);\n\n        if (color.ok) {\n          newValue = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + opacityProp.numValue() + ')';\n        }\n      }\n\n      return new svg.Property(this.name, newValue);\n    }; // definition extensions\n    // get the definition from the definitions table\n\n\n    svg.Property.prototype.getDefinition = function () {\n      var name = this.value.match(/#([^\\)'\"]+)/);\n\n      if (name) {\n        name = name[1];\n      }\n\n      if (!name) {\n        name = this.value;\n      }\n\n      return svg.Definitions[name];\n    };\n\n    svg.Property.prototype.isUrlDefinition = function () {\n      return this.value.indexOf('url(') == 0;\n    };\n\n    svg.Property.prototype.getFillStyleDefinition = function (e, opacityProp) {\n      var def = this.getDefinition(); // gradient\n\n      if (def != null && def.createGradient) {\n        return def.createGradient(svg.ctx, e, opacityProp);\n      } // pattern\n\n\n      if (def != null && def.createPattern) {\n        if (def.getHrefAttribute().hasValue()) {\n          var pt = def.attribute('patternTransform');\n          def = def.getHrefAttribute().getDefinition();\n\n          if (pt.hasValue()) {\n            def.attribute('patternTransform', true).value = pt.value;\n          }\n        }\n\n        return def.createPattern(svg.ctx, e);\n      }\n\n      return null;\n    }; // length extensions\n\n\n    svg.Property.prototype.getDPI = function (viewPort) {\n      return 96.0; // TODO: compute?\n    };\n\n    svg.Property.prototype.getEM = function (viewPort) {\n      var em = 12;\n      var fontSize = new svg.Property('fontSize', svg.Font.Parse(svg.ctx.font).fontSize);\n      if (fontSize.hasValue()) em = fontSize.toPixels(viewPort);\n      return em;\n    };\n\n    svg.Property.prototype.getUnits = function () {\n      var s = this.value + '';\n      return s.replace(/[0-9\\.\\-]/g, '');\n    }; // get the length as pixels\n\n\n    svg.Property.prototype.toPixels = function (viewPort, processPercent) {\n      if (!this.hasValue()) return 0;\n      var s = this.value + '';\n      if (s.match(/em$/)) return this.numValue() * this.getEM(viewPort);\n      if (s.match(/ex$/)) return this.numValue() * this.getEM(viewPort) / 2.0;\n      if (s.match(/px$/)) return this.numValue();\n      if (s.match(/pt$/)) return this.numValue() * this.getDPI(viewPort) * (1.0 / 72.0);\n      if (s.match(/pc$/)) return this.numValue() * 15;\n      if (s.match(/cm$/)) return this.numValue() * this.getDPI(viewPort) / 2.54;\n      if (s.match(/mm$/)) return this.numValue() * this.getDPI(viewPort) / 25.4;\n      if (s.match(/in$/)) return this.numValue() * this.getDPI(viewPort);\n      if (s.match(/%$/)) return this.numValue() * svg.ViewPort.ComputeSize(viewPort);\n      var n = this.numValue();\n      if (processPercent && n < 1.0) return n * svg.ViewPort.ComputeSize(viewPort);\n      return n;\n    }; // time extensions\n    // get the time as milliseconds\n\n\n    svg.Property.prototype.toMilliseconds = function () {\n      if (!this.hasValue()) return 0;\n      var s = this.value + '';\n      if (s.match(/s$/)) return this.numValue() * 1000;\n      if (s.match(/ms$/)) return this.numValue();\n      return this.numValue();\n    }; // angle extensions\n    // get the angle as radians\n\n\n    svg.Property.prototype.toRadians = function () {\n      if (!this.hasValue()) return 0;\n      var s = this.value + '';\n      if (s.match(/deg$/)) return this.numValue() * (Math.PI / 180.0);\n      if (s.match(/grad$/)) return this.numValue() * (Math.PI / 200.0);\n      if (s.match(/rad$/)) return this.numValue();\n      return this.numValue() * (Math.PI / 180.0);\n    }; // text extensions\n    // get the text baseline\n\n\n    var textBaselineMapping = {\n      'baseline': 'alphabetic',\n      'before-edge': 'top',\n      'text-before-edge': 'top',\n      'middle': 'middle',\n      'central': 'middle',\n      'after-edge': 'bottom',\n      'text-after-edge': 'bottom',\n      'ideographic': 'ideographic',\n      'alphabetic': 'alphabetic',\n      'hanging': 'hanging',\n      'mathematical': 'alphabetic'\n    };\n\n    svg.Property.prototype.toTextBaseline = function () {\n      if (!this.hasValue()) return null;\n      return textBaselineMapping[this.value];\n    }; // fonts\n\n\n    svg.Font = new function () {\n      this.Styles = 'normal|italic|oblique|inherit';\n      this.Variants = 'normal|small-caps|inherit';\n      this.Weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';\n\n      this.CreateFont = function (fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {\n        var f = inherit != null ? this.Parse(inherit) : this.CreateFont('', '', '', '', '', svg.ctx.font);\n        return {\n          fontFamily: fontFamily || f.fontFamily,\n          fontSize: fontSize || f.fontSize,\n          fontStyle: fontStyle || f.fontStyle,\n          fontWeight: fontWeight || f.fontWeight,\n          fontVariant: fontVariant || f.fontVariant,\n          toString: function toString() {\n            return [this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.fontFamily].join(' ');\n          }\n        };\n      };\n\n      var that = this;\n\n      this.Parse = function (s) {\n        var f = {};\n        var d = svg.trim(svg.compressSpaces(s || '')).split(' ');\n        var set = {\n          fontSize: false,\n          fontStyle: false,\n          fontWeight: false,\n          fontVariant: false\n        };\n        var ff = '';\n\n        for (var i = 0; i < d.length; i++) {\n          if (!set.fontStyle && that.Styles.indexOf(d[i]) != -1) {\n            if (d[i] != 'inherit') f.fontStyle = d[i];\n            set.fontStyle = true;\n          } else if (!set.fontVariant && that.Variants.indexOf(d[i]) != -1) {\n            if (d[i] != 'inherit') f.fontVariant = d[i];\n            set.fontStyle = set.fontVariant = true;\n          } else if (!set.fontWeight && that.Weights.indexOf(d[i]) != -1) {\n            if (d[i] != 'inherit') f.fontWeight = d[i];\n            set.fontStyle = set.fontVariant = set.fontWeight = true;\n          } else if (!set.fontSize) {\n            if (d[i] != 'inherit') f.fontSize = d[i].split('/')[0];\n            set.fontStyle = set.fontVariant = set.fontWeight = set.fontSize = true;\n          } else {\n            if (d[i] != 'inherit') ff += d[i];\n          }\n        }\n\n        if (ff != '') f.fontFamily = ff;\n        return f;\n      };\n    }(); // points and paths\n\n    svg.ToNumberArray = function (s) {\n      var a = svg.trim(svg.compressSpaces((s || '').replace(/,/g, ' '))).split(' ');\n\n      for (var i = 0; i < a.length; i++) {\n        a[i] = parseFloat(a[i]);\n      }\n\n      return a;\n    };\n\n    svg.Point = function (x, y) {\n      this.x = x;\n      this.y = y;\n    };\n\n    svg.Point.prototype.angleTo = function (p) {\n      return Math.atan2(p.y - this.y, p.x - this.x);\n    };\n\n    svg.Point.prototype.applyTransform = function (v) {\n      var xp = this.x * v[0] + this.y * v[2] + v[4];\n      var yp = this.x * v[1] + this.y * v[3] + v[5];\n      this.x = xp;\n      this.y = yp;\n    };\n\n    svg.CreatePoint = function (s) {\n      var a = svg.ToNumberArray(s);\n      return new svg.Point(a[0], a[1]);\n    };\n\n    svg.CreatePath = function (s) {\n      var a = svg.ToNumberArray(s);\n      var path = [];\n\n      for (var i = 0; i < a.length; i += 2) {\n        path.push(new svg.Point(a[i], a[i + 1]));\n      }\n\n      return path;\n    }; // bounding box\n\n\n    svg.BoundingBox = function (x1, y1, x2, y2) {\n      // pass in initial points if you want\n      this.x1 = Number.NaN;\n      this.y1 = Number.NaN;\n      this.x2 = Number.NaN;\n      this.y2 = Number.NaN;\n\n      this.x = function () {\n        return this.x1;\n      };\n\n      this.y = function () {\n        return this.y1;\n      };\n\n      this.width = function () {\n        return this.x2 - this.x1;\n      };\n\n      this.height = function () {\n        return this.y2 - this.y1;\n      };\n\n      this.addPoint = function (x, y) {\n        if (x != null) {\n          if (isNaN(this.x1) || isNaN(this.x2)) {\n            this.x1 = x;\n            this.x2 = x;\n          }\n\n          if (x < this.x1) this.x1 = x;\n          if (x > this.x2) this.x2 = x;\n        }\n\n        if (y != null) {\n          if (isNaN(this.y1) || isNaN(this.y2)) {\n            this.y1 = y;\n            this.y2 = y;\n          }\n\n          if (y < this.y1) this.y1 = y;\n          if (y > this.y2) this.y2 = y;\n        }\n      };\n\n      this.addX = function (x) {\n        this.addPoint(x, null);\n      };\n\n      this.addY = function (y) {\n        this.addPoint(null, y);\n      };\n\n      this.addBoundingBox = function (bb) {\n        this.addPoint(bb.x1, bb.y1);\n        this.addPoint(bb.x2, bb.y2);\n      };\n\n      this.addQuadraticCurve = function (p0x, p0y, p1x, p1y, p2x, p2y) {\n        var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n        var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)\n\n        var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n        var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)\n\n        this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);\n      };\n\n      this.addBezierCurve = function (p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {\n        // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n        var p0 = [p0x, p0y],\n            p1 = [p1x, p1y],\n            p2 = [p2x, p2y],\n            p3 = [p3x, p3y];\n        this.addPoint(p0[0], p0[1]);\n        this.addPoint(p3[0], p3[1]);\n\n        for (i = 0; i <= 1; i++) {\n          var f = function f(t) {\n            return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];\n          };\n\n          var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];\n          var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];\n          var c = 3 * p1[i] - 3 * p0[i];\n\n          if (a == 0) {\n            if (b == 0) continue;\n            var t = -c / b;\n\n            if (0 < t && t < 1) {\n              if (i == 0) this.addX(f(t));\n              if (i == 1) this.addY(f(t));\n            }\n\n            continue;\n          }\n\n          var b2ac = Math.pow(b, 2) - 4 * c * a;\n          if (b2ac < 0) continue;\n          var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);\n\n          if (0 < t1 && t1 < 1) {\n            if (i == 0) this.addX(f(t1));\n            if (i == 1) this.addY(f(t1));\n          }\n\n          var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);\n\n          if (0 < t2 && t2 < 1) {\n            if (i == 0) this.addX(f(t2));\n            if (i == 1) this.addY(f(t2));\n          }\n        }\n      };\n\n      this.isPointInBox = function (x, y) {\n        return this.x1 <= x && x <= this.x2 && this.y1 <= y && y <= this.y2;\n      };\n\n      this.addPoint(x1, y1);\n      this.addPoint(x2, y2);\n    }; // transforms\n\n\n    svg.Transform = function (v) {\n      var that = this;\n      this.Type = {}; // translate\n\n      this.Type.translate = function (s) {\n        this.p = svg.CreatePoint(s);\n\n        this.apply = function (ctx) {\n          ctx.translate(this.p.x || 0.0, this.p.y || 0.0);\n        };\n\n        this.unapply = function (ctx) {\n          ctx.translate(-1.0 * this.p.x || 0.0, -1.0 * this.p.y || 0.0);\n        };\n\n        this.applyToPoint = function (p) {\n          p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);\n        };\n      }; // rotate\n\n\n      this.Type.rotate = function (s) {\n        var a = svg.ToNumberArray(s);\n        this.angle = new svg.Property('angle', a[0]);\n        this.cx = a[1] || 0;\n        this.cy = a[2] || 0;\n\n        this.apply = function (ctx) {\n          ctx.translate(this.cx, this.cy);\n          ctx.rotate(this.angle.toRadians());\n          ctx.translate(-this.cx, -this.cy);\n        };\n\n        this.unapply = function (ctx) {\n          ctx.translate(this.cx, this.cy);\n          ctx.rotate(-1.0 * this.angle.toRadians());\n          ctx.translate(-this.cx, -this.cy);\n        };\n\n        this.applyToPoint = function (p) {\n          var a = this.angle.toRadians();\n          p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);\n          p.applyTransform([Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0]);\n          p.applyTransform([1, 0, 0, 1, -this.p.x || 0.0, -this.p.y || 0.0]);\n        };\n      };\n\n      this.Type.scale = function (s) {\n        this.p = svg.CreatePoint(s);\n\n        this.apply = function (ctx) {\n          ctx.scale(this.p.x || 1.0, this.p.y || this.p.x || 1.0);\n        };\n\n        this.unapply = function (ctx) {\n          ctx.scale(1.0 / this.p.x || 1.0, 1.0 / this.p.y || this.p.x || 1.0);\n        };\n\n        this.applyToPoint = function (p) {\n          p.applyTransform([this.p.x || 0.0, 0, 0, this.p.y || 0.0, 0, 0]);\n        };\n      };\n\n      this.Type.matrix = function (s) {\n        this.m = svg.ToNumberArray(s);\n\n        this.apply = function (ctx) {\n          ctx.transform(this.m[0], this.m[1], this.m[2], this.m[3], this.m[4], this.m[5]);\n        };\n\n        this.unapply = function (ctx) {\n          var a = this.m[0];\n          var b = this.m[2];\n          var c = this.m[4];\n          var d = this.m[1];\n          var e = this.m[3];\n          var f = this.m[5];\n          var g = 0.0;\n          var h = 0.0;\n          var i = 1.0;\n          var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));\n          ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));\n        };\n\n        this.applyToPoint = function (p) {\n          p.applyTransform(this.m);\n        };\n      };\n\n      this.Type.SkewBase = function (s) {\n        this.base = that.Type.matrix;\n        this.base(s);\n        this.angle = new svg.Property('angle', s);\n      };\n\n      this.Type.SkewBase.prototype = new this.Type.matrix();\n\n      this.Type.skewX = function (s) {\n        this.base = that.Type.SkewBase;\n        this.base(s);\n        this.m = [1, 0, Math.tan(this.angle.toRadians()), 1, 0, 0];\n      };\n\n      this.Type.skewX.prototype = new this.Type.SkewBase();\n\n      this.Type.skewY = function (s) {\n        this.base = that.Type.SkewBase;\n        this.base(s);\n        this.m = [1, Math.tan(this.angle.toRadians()), 0, 1, 0, 0];\n      };\n\n      this.Type.skewY.prototype = new this.Type.SkewBase();\n      this.transforms = [];\n\n      this.apply = function (ctx) {\n        for (var i = 0; i < this.transforms.length; i++) {\n          this.transforms[i].apply(ctx);\n        }\n      };\n\n      this.unapply = function (ctx) {\n        for (var i = this.transforms.length - 1; i >= 0; i--) {\n          this.transforms[i].unapply(ctx);\n        }\n      };\n\n      this.applyToPoint = function (p) {\n        for (var i = 0; i < this.transforms.length; i++) {\n          this.transforms[i].applyToPoint(p);\n        }\n      };\n\n      var data = svg.trim(svg.compressSpaces(v)).replace(/\\)([a-zA-Z])/g, ') $1').replace(/\\)(\\s?,\\s?)/g, ') ').split(/\\s(?=[a-z])/);\n\n      for (var i = 0; i < data.length; i++) {\n        var type = svg.trim(data[i].split('(')[0]);\n        var s = data[i].split('(')[1].replace(')', '');\n        var transform = new this.Type[type](s);\n        transform.type = type;\n        this.transforms.push(transform);\n      }\n    }; // aspect ratio\n\n\n    svg.AspectRatio = function (ctx, aspectRatio, width, desiredWidth, height, desiredHeight, minX, minY, refX, refY) {\n      // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute\n      aspectRatio = svg.compressSpaces(aspectRatio);\n      aspectRatio = aspectRatio.replace(/^defer\\s/, ''); // ignore defer\n\n      var align = aspectRatio.split(' ')[0] || 'xMidYMid';\n      var meetOrSlice = aspectRatio.split(' ')[1] || 'meet'; // calculate scale\n\n      var scaleX = width / desiredWidth;\n      var scaleY = height / desiredHeight;\n      var scaleMin = Math.min(scaleX, scaleY);\n      var scaleMax = Math.max(scaleX, scaleY);\n\n      if (meetOrSlice == 'meet') {\n        desiredWidth *= scaleMin;\n        desiredHeight *= scaleMin;\n      }\n\n      if (meetOrSlice == 'slice') {\n        desiredWidth *= scaleMax;\n        desiredHeight *= scaleMax;\n      }\n\n      refX = new svg.Property('refX', refX);\n      refY = new svg.Property('refY', refY);\n\n      if (refX.hasValue() && refY.hasValue()) {\n        ctx.translate(-scaleMin * refX.toPixels('x'), -scaleMin * refY.toPixels('y'));\n      } else {\n        // align\n        if (align.match(/^xMid/) && (meetOrSlice == 'meet' && scaleMin == scaleY || meetOrSlice == 'slice' && scaleMax == scaleY)) ctx.translate(width / 2.0 - desiredWidth / 2.0, 0);\n        if (align.match(/YMid$/) && (meetOrSlice == 'meet' && scaleMin == scaleX || meetOrSlice == 'slice' && scaleMax == scaleX)) ctx.translate(0, height / 2.0 - desiredHeight / 2.0);\n        if (align.match(/^xMax/) && (meetOrSlice == 'meet' && scaleMin == scaleY || meetOrSlice == 'slice' && scaleMax == scaleY)) ctx.translate(width - desiredWidth, 0);\n        if (align.match(/YMax$/) && (meetOrSlice == 'meet' && scaleMin == scaleX || meetOrSlice == 'slice' && scaleMax == scaleX)) ctx.translate(0, height - desiredHeight);\n      } // scale\n\n\n      if (align == 'none') ctx.scale(scaleX, scaleY);else if (meetOrSlice == 'meet') ctx.scale(scaleMin, scaleMin);else if (meetOrSlice == 'slice') ctx.scale(scaleMax, scaleMax); // translate\n\n      ctx.translate(minX == null ? 0 : -minX, minY == null ? 0 : -minY);\n    }; // elements\n\n\n    svg.Element = {};\n    svg.EmptyProperty = new svg.Property('EMPTY', '');\n\n    svg.Element.ElementBase = function (node) {\n      this.attributes = {};\n      this.styles = {};\n      this.stylesSpecificity = {};\n      this.children = []; // get or create attribute\n\n      this.attribute = function (name, createIfNotExists) {\n        var a = this.attributes[name];\n        if (a != null) return a;\n\n        if (createIfNotExists == true) {\n          a = new svg.Property(name, '');\n          this.attributes[name] = a;\n        }\n\n        return a || svg.EmptyProperty;\n      };\n\n      this.getHrefAttribute = function () {\n        for (var a in this.attributes) {\n          if (a == 'href' || a.match(/:href$/)) {\n            return this.attributes[a];\n          }\n        }\n\n        return svg.EmptyProperty;\n      }; // get or create style, crawls up node tree\n\n\n      this.style = function (name, createIfNotExists, skipAncestors) {\n        var s = this.styles[name];\n        if (s != null) return s;\n        var a = this.attribute(name);\n\n        if (a != null && a.hasValue()) {\n          this.styles[name] = a; // move up to me to cache\n\n          return a;\n        }\n\n        if (skipAncestors != true) {\n          var p = this.parent;\n\n          if (p != null) {\n            var ps = p.style(name);\n\n            if (ps != null && ps.hasValue()) {\n              return ps;\n            }\n          }\n        }\n\n        if (createIfNotExists == true) {\n          s = new svg.Property(name, '');\n          this.styles[name] = s;\n        }\n\n        return s || svg.EmptyProperty;\n      }; // base render\n\n\n      this.render = function (ctx) {\n        // don't render display=none\n        if (this.style('display').value == 'none') return; // don't render visibility=hidden\n\n        if (this.style('visibility').value == 'hidden') return;\n        ctx.save();\n\n        if (this.attribute('mask').hasValue()) {\n          // mask\n          var mask = this.attribute('mask').getDefinition();\n          if (mask != null) mask.apply(ctx, this);\n        } else if (this.style('filter').hasValue()) {\n          // filter\n          var filter = this.style('filter').getDefinition();\n          if (filter != null) filter.apply(ctx, this);\n        } else {\n          this.setContext(ctx);\n          this.renderChildren(ctx);\n          this.clearContext(ctx);\n        }\n\n        ctx.restore();\n      }; // base set context\n\n\n      this.setContext = function (ctx) {// OVERRIDE ME!\n      }; // base clear context\n\n\n      this.clearContext = function (ctx) {// OVERRIDE ME!\n      }; // base render children\n\n\n      this.renderChildren = function (ctx) {\n        for (var i = 0; i < this.children.length; i++) {\n          this.children[i].render(ctx);\n        }\n      };\n\n      this.addChild = function (childNode, create) {\n        var child = childNode;\n        if (create) child = svg.CreateElement(childNode);\n        child.parent = this;\n\n        if (child.type != 'title') {\n          this.children.push(child);\n        }\n      };\n\n      this.addStylesFromStyleDefinition = function () {\n        // add styles\n        for (var selector in svg.Styles) {\n          if (selector[0] != '@' && matchesSelector(node, selector)) {\n            var styles = svg.Styles[selector];\n            var specificity = svg.StylesSpecificity[selector];\n\n            if (styles != null) {\n              for (var name in styles) {\n                var existingSpecificity = this.stylesSpecificity[name];\n\n                if (typeof existingSpecificity == 'undefined') {\n                  existingSpecificity = '000';\n                }\n\n                if (specificity > existingSpecificity) {\n                  this.styles[name] = styles[name];\n                  this.stylesSpecificity[name] = specificity;\n                }\n              }\n            }\n          }\n        }\n      };\n\n      if (node != null && node.nodeType == 1) {\n        //ELEMENT_NODE\n        // add attributes\n        for (var i = 0; i < node.attributes.length; i++) {\n          var attribute = node.attributes[i];\n          this.attributes[attribute.nodeName] = new svg.Property(attribute.nodeName, attribute.value);\n        }\n\n        this.addStylesFromStyleDefinition(); // add inline styles\n\n        if (this.attribute('style').hasValue()) {\n          var styles = this.attribute('style').value.split(';');\n\n          for (var i = 0; i < styles.length; i++) {\n            if (svg.trim(styles[i]) != '') {\n              var style = styles[i].split(':');\n              var name = svg.trim(style[0]);\n              var value = svg.trim(style[1]);\n              this.styles[name] = new svg.Property(name, value);\n            }\n          }\n        } // add id\n\n\n        if (this.attribute('id').hasValue()) {\n          if (svg.Definitions[this.attribute('id').value] == null) {\n            svg.Definitions[this.attribute('id').value] = this;\n          }\n        } // add children\n\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n          var childNode = node.childNodes[i];\n          if (childNode.nodeType == 1) this.addChild(childNode, true); //ELEMENT_NODE\n\n          if (this.captureTextNodes && (childNode.nodeType == 3 || childNode.nodeType == 4)) {\n            var text = childNode.value || childNode.text || childNode.textContent || '';\n\n            if (svg.compressSpaces(text) != '') {\n              this.addChild(new svg.Element.tspan(childNode), false); // TEXT_NODE\n            }\n          }\n        }\n      }\n    };\n\n    svg.Element.RenderedElementBase = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.setContext = function (ctx) {\n        // fill\n        if (this.style('fill').isUrlDefinition()) {\n          var fs = this.style('fill').getFillStyleDefinition(this, this.style('fill-opacity'));\n          if (fs != null) ctx.fillStyle = fs;\n        } else if (this.style('fill').hasValue()) {\n          var fillStyle = this.style('fill');\n          if (fillStyle.value == 'currentColor') fillStyle.value = this.style('color').value;\n          if (fillStyle.value != 'inherit') ctx.fillStyle = fillStyle.value == 'none' ? 'rgba(0,0,0,0)' : fillStyle.value;\n        }\n\n        if (this.style('fill-opacity').hasValue()) {\n          var fillStyle = new svg.Property('fill', ctx.fillStyle);\n          fillStyle = fillStyle.addOpacity(this.style('fill-opacity'));\n          ctx.fillStyle = fillStyle.value;\n        } // stroke\n\n\n        if (this.style('stroke').isUrlDefinition()) {\n          var fs = this.style('stroke').getFillStyleDefinition(this, this.style('stroke-opacity'));\n          if (fs != null) ctx.strokeStyle = fs;\n        } else if (this.style('stroke').hasValue()) {\n          var strokeStyle = this.style('stroke');\n          if (strokeStyle.value == 'currentColor') strokeStyle.value = this.style('color').value;\n          if (strokeStyle.value != 'inherit') ctx.strokeStyle = strokeStyle.value == 'none' ? 'rgba(0,0,0,0)' : strokeStyle.value;\n        }\n\n        if (this.style('stroke-opacity').hasValue()) {\n          var strokeStyle = new svg.Property('stroke', ctx.strokeStyle);\n          strokeStyle = strokeStyle.addOpacity(this.style('stroke-opacity'));\n          ctx.strokeStyle = strokeStyle.value;\n        }\n\n        if (this.style('stroke-width').hasValue()) {\n          var newLineWidth = this.style('stroke-width').toPixels();\n          ctx.lineWidth = newLineWidth == 0 ? 0.001 : newLineWidth; // browsers don't respect 0\n        }\n\n        if (this.style('stroke-linecap').hasValue()) ctx.lineCap = this.style('stroke-linecap').value;\n        if (this.style('stroke-linejoin').hasValue()) ctx.lineJoin = this.style('stroke-linejoin').value;\n        if (this.style('stroke-miterlimit').hasValue()) ctx.miterLimit = this.style('stroke-miterlimit').value;\n\n        if (this.style('stroke-dasharray').hasValue() && this.style('stroke-dasharray').value != 'none') {\n          var gaps = svg.ToNumberArray(this.style('stroke-dasharray').value);\n\n          if (typeof ctx.setLineDash != 'undefined') {\n            ctx.setLineDash(gaps);\n          } else if (typeof ctx.webkitLineDash != 'undefined') {\n            ctx.webkitLineDash = gaps;\n          } else if (typeof ctx.mozDash != 'undefined' && !(gaps.length == 1 && gaps[0] == 0)) {\n            ctx.mozDash = gaps;\n          }\n\n          var offset = this.style('stroke-dashoffset').numValueOrDefault(1);\n\n          if (typeof ctx.lineDashOffset != 'undefined') {\n            ctx.lineDashOffset = offset;\n          } else if (typeof ctx.webkitLineDashOffset != 'undefined') {\n            ctx.webkitLineDashOffset = offset;\n          } else if (typeof ctx.mozDashOffset != 'undefined') {\n            ctx.mozDashOffset = offset;\n          }\n        } // font\n\n\n        if (typeof ctx.font != 'undefined') {\n          ctx.font = svg.Font.CreateFont(this.style('font-style').value, this.style('font-variant').value, this.style('font-weight').value, this.style('font-size').hasValue() ? this.style('font-size').toPixels() + 'px' : '', this.style('font-family').value).toString();\n        } // transform\n\n\n        if (this.style('transform', false, true).hasValue()) {\n          var transform = new svg.Transform(this.style('transform', false, true).value);\n          transform.apply(ctx);\n        } // clip\n\n\n        if (this.attribute('clip-path', false, true).hasValue()) {\n          var clip = this.attribute('clip-path', false, true).getDefinition();\n          if (clip != null) clip.apply(ctx);\n        } // opacity\n\n\n        if (this.style('opacity').hasValue()) {\n          ctx.globalAlpha = this.style('opacity').numValue();\n        }\n      };\n    };\n\n    svg.Element.RenderedElementBase.prototype = new svg.Element.ElementBase();\n\n    svg.Element.PathElementBase = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n\n      this.path = function (ctx) {\n        if (ctx != null) ctx.beginPath();\n        return new svg.BoundingBox();\n      };\n\n      this.renderChildren = function (ctx) {\n        this.path(ctx);\n        svg.Mouse.checkPath(this, ctx);\n\n        if (ctx.fillStyle != '') {\n          if (this.style('fill-rule').valueOrDefault('inherit') != 'inherit') {\n            ctx.fill(this.style('fill-rule').value);\n          } else {\n            ctx.fill();\n          }\n        }\n\n        if (ctx.strokeStyle != '') ctx.stroke();\n        var markers = this.getMarkers();\n\n        if (markers != null) {\n          if (this.style('marker-start').isUrlDefinition()) {\n            var marker = this.style('marker-start').getDefinition();\n            marker.render(ctx, markers[0][0], markers[0][1]);\n          }\n\n          if (this.style('marker-mid').isUrlDefinition()) {\n            var marker = this.style('marker-mid').getDefinition();\n\n            for (var i = 1; i < markers.length - 1; i++) {\n              marker.render(ctx, markers[i][0], markers[i][1]);\n            }\n          }\n\n          if (this.style('marker-end').isUrlDefinition()) {\n            var marker = this.style('marker-end').getDefinition();\n            marker.render(ctx, markers[markers.length - 1][0], markers[markers.length - 1][1]);\n          }\n        }\n      };\n\n      this.getBoundingBox = function () {\n        return this.path();\n      };\n\n      this.getMarkers = function () {\n        return null;\n      };\n    };\n\n    svg.Element.PathElementBase.prototype = new svg.Element.RenderedElementBase(); // svg element\n\n    svg.Element.svg = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n      this.baseClearContext = this.clearContext;\n\n      this.clearContext = function (ctx) {\n        this.baseClearContext(ctx);\n        svg.ViewPort.RemoveCurrent();\n      };\n\n      this.baseSetContext = this.setContext;\n\n      this.setContext = function (ctx) {\n        // initial values and defaults\n        ctx.strokeStyle = 'rgba(0,0,0,0)';\n        ctx.lineCap = 'butt';\n        ctx.lineJoin = 'miter';\n        ctx.miterLimit = 4;\n\n        if (typeof ctx.font != 'undefined' && typeof window.getComputedStyle != 'undefined') {\n          ctx.font = window.getComputedStyle(ctx.canvas).getPropertyValue('font');\n        }\n\n        this.baseSetContext(ctx); // create new view port\n\n        if (!this.attribute('x').hasValue()) this.attribute('x', true).value = 0;\n        if (!this.attribute('y').hasValue()) this.attribute('y', true).value = 0;\n        ctx.translate(this.attribute('x').toPixels('x'), this.attribute('y').toPixels('y'));\n        var width = svg.ViewPort.width();\n        var height = svg.ViewPort.height();\n        if (!this.attribute('width').hasValue()) this.attribute('width', true).value = '100%';\n        if (!this.attribute('height').hasValue()) this.attribute('height', true).value = '100%';\n\n        if (typeof this.root == 'undefined') {\n          width = this.attribute('width').toPixels('x');\n          height = this.attribute('height').toPixels('y');\n          var x = 0;\n          var y = 0;\n\n          if (this.attribute('refX').hasValue() && this.attribute('refY').hasValue()) {\n            x = -this.attribute('refX').toPixels('x');\n            y = -this.attribute('refY').toPixels('y');\n          }\n\n          if (this.attribute('overflow').valueOrDefault('hidden') != 'visible') {\n            ctx.beginPath();\n            ctx.moveTo(x, y);\n            ctx.lineTo(width, y);\n            ctx.lineTo(width, height);\n            ctx.lineTo(x, height);\n            ctx.closePath();\n            ctx.clip();\n          }\n        }\n\n        svg.ViewPort.SetCurrent(width, height); // viewbox\n\n        if (this.attribute('viewBox').hasValue()) {\n          var viewBox = svg.ToNumberArray(this.attribute('viewBox').value);\n          var minX = viewBox[0];\n          var minY = viewBox[1];\n          width = viewBox[2];\n          height = viewBox[3];\n          svg.AspectRatio(ctx, this.attribute('preserveAspectRatio').value, svg.ViewPort.width(), width, svg.ViewPort.height(), height, minX, minY, this.attribute('refX').value, this.attribute('refY').value);\n          svg.ViewPort.RemoveCurrent();\n          svg.ViewPort.SetCurrent(viewBox[2], viewBox[3]);\n        }\n      };\n    };\n\n    svg.Element.svg.prototype = new svg.Element.RenderedElementBase(); // rect element\n\n    svg.Element.rect = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n\n      this.path = function (ctx) {\n        var x = this.attribute('x').toPixels('x');\n        var y = this.attribute('y').toPixels('y');\n        var width = this.attribute('width').toPixels('x');\n        var height = this.attribute('height').toPixels('y');\n        var rx = this.attribute('rx').toPixels('x');\n        var ry = this.attribute('ry').toPixels('y');\n        if (this.attribute('rx').hasValue() && !this.attribute('ry').hasValue()) ry = rx;\n        if (this.attribute('ry').hasValue() && !this.attribute('rx').hasValue()) rx = ry;\n        rx = Math.min(rx, width / 2.0);\n        ry = Math.min(ry, height / 2.0);\n\n        if (ctx != null) {\n          ctx.beginPath();\n          ctx.moveTo(x + rx, y);\n          ctx.lineTo(x + width - rx, y);\n          ctx.quadraticCurveTo(x + width, y, x + width, y + ry);\n          ctx.lineTo(x + width, y + height - ry);\n          ctx.quadraticCurveTo(x + width, y + height, x + width - rx, y + height);\n          ctx.lineTo(x + rx, y + height);\n          ctx.quadraticCurveTo(x, y + height, x, y + height - ry);\n          ctx.lineTo(x, y + ry);\n          ctx.quadraticCurveTo(x, y, x + rx, y);\n          ctx.closePath();\n        }\n\n        return new svg.BoundingBox(x, y, x + width, y + height);\n      };\n    };\n\n    svg.Element.rect.prototype = new svg.Element.PathElementBase(); // circle element\n\n    svg.Element.circle = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n\n      this.path = function (ctx) {\n        var cx = this.attribute('cx').toPixels('x');\n        var cy = this.attribute('cy').toPixels('y');\n        var r = this.attribute('r').toPixels();\n\n        if (ctx != null) {\n          ctx.beginPath();\n          ctx.arc(cx, cy, r, 0, Math.PI * 2, true);\n          ctx.closePath();\n        }\n\n        return new svg.BoundingBox(cx - r, cy - r, cx + r, cy + r);\n      };\n    };\n\n    svg.Element.circle.prototype = new svg.Element.PathElementBase(); // ellipse element\n\n    svg.Element.ellipse = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n\n      this.path = function (ctx) {\n        var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n        var rx = this.attribute('rx').toPixels('x');\n        var ry = this.attribute('ry').toPixels('y');\n        var cx = this.attribute('cx').toPixels('x');\n        var cy = this.attribute('cy').toPixels('y');\n\n        if (ctx != null) {\n          ctx.beginPath();\n          ctx.moveTo(cx, cy - ry);\n          ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);\n          ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);\n          ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);\n          ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);\n          ctx.closePath();\n        }\n\n        return new svg.BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);\n      };\n    };\n\n    svg.Element.ellipse.prototype = new svg.Element.PathElementBase(); // line element\n\n    svg.Element.line = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n\n      this.getPoints = function () {\n        return [new svg.Point(this.attribute('x1').toPixels('x'), this.attribute('y1').toPixels('y')), new svg.Point(this.attribute('x2').toPixels('x'), this.attribute('y2').toPixels('y'))];\n      };\n\n      this.path = function (ctx) {\n        var points = this.getPoints();\n\n        if (ctx != null) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          ctx.lineTo(points[1].x, points[1].y);\n        }\n\n        return new svg.BoundingBox(points[0].x, points[0].y, points[1].x, points[1].y);\n      };\n\n      this.getMarkers = function () {\n        var points = this.getPoints();\n        var a = points[0].angleTo(points[1]);\n        return [[points[0], a], [points[1], a]];\n      };\n    };\n\n    svg.Element.line.prototype = new svg.Element.PathElementBase(); // polyline element\n\n    svg.Element.polyline = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n      this.points = svg.CreatePath(this.attribute('points').value);\n\n      this.path = function (ctx) {\n        var bb = new svg.BoundingBox(this.points[0].x, this.points[0].y);\n\n        if (ctx != null) {\n          ctx.beginPath();\n          ctx.moveTo(this.points[0].x, this.points[0].y);\n        }\n\n        for (var i = 1; i < this.points.length; i++) {\n          bb.addPoint(this.points[i].x, this.points[i].y);\n          if (ctx != null) ctx.lineTo(this.points[i].x, this.points[i].y);\n        }\n\n        return bb;\n      };\n\n      this.getMarkers = function () {\n        var markers = [];\n\n        for (var i = 0; i < this.points.length - 1; i++) {\n          markers.push([this.points[i], this.points[i].angleTo(this.points[i + 1])]);\n        }\n\n        markers.push([this.points[this.points.length - 1], markers[markers.length - 1][1]]);\n        return markers;\n      };\n    };\n\n    svg.Element.polyline.prototype = new svg.Element.PathElementBase(); // polygon element\n\n    svg.Element.polygon = function (node) {\n      this.base = svg.Element.polyline;\n      this.base(node);\n      this.basePath = this.path;\n\n      this.path = function (ctx) {\n        var bb = this.basePath(ctx);\n\n        if (ctx != null) {\n          ctx.lineTo(this.points[0].x, this.points[0].y);\n          ctx.closePath();\n        }\n\n        return bb;\n      };\n    };\n\n    svg.Element.polygon.prototype = new svg.Element.polyline(); // path element\n\n    svg.Element.path = function (node) {\n      this.base = svg.Element.PathElementBase;\n      this.base(node);\n      var d = this.attribute('d').value; // TODO: convert to real lexer based on http://www.w3.org/TR/SVG11/paths.html#PathDataBNF\n\n      d = d.replace(/,/gm, ' '); // get rid of all commas\n      // As the end of a match can also be the start of the next match, we need to run this replace twice.\n\n      for (var i = 0; i < 2; i++) {\n        d = d.replace(/([MmZzLlHhVvCcSsQqTtAa])([^\\s])/gm, '$1 $2');\n      } // suffix commands with spaces\n\n\n      d = d.replace(/([^\\s])([MmZzLlHhVvCcSsQqTtAa])/gm, '$1 $2'); // prefix commands with spaces\n\n      d = d.replace(/([0-9])([+\\-])/gm, '$1 $2'); // separate digits on +- signs\n      // Again, we need to run this twice to find all occurances\n\n      for (var i = 0; i < 2; i++) {\n        d = d.replace(/(\\.[0-9]*)(\\.)/gm, '$1 $2');\n      } // separate digits when they start with a comma\n\n\n      d = d.replace(/([Aa](\\s+[0-9]+){3})\\s+([01])\\s*([01])/gm, '$1 $3 $4 '); // shorthand elliptical arc path syntax\n\n      d = svg.compressSpaces(d); // compress multiple spaces\n\n      d = svg.trim(d);\n      this.PathParser = new function (d) {\n        this.tokens = d.split(' ');\n\n        this.reset = function () {\n          this.i = -1;\n          this.command = '';\n          this.previousCommand = '';\n          this.start = new svg.Point(0, 0);\n          this.control = new svg.Point(0, 0);\n          this.current = new svg.Point(0, 0);\n          this.points = [];\n          this.angles = [];\n        };\n\n        this.isEnd = function () {\n          return this.i >= this.tokens.length - 1;\n        };\n\n        this.isCommandOrEnd = function () {\n          if (this.isEnd()) return true;\n          return this.tokens[this.i + 1].match(/^[A-Za-z]$/) != null;\n        };\n\n        this.isRelativeCommand = function () {\n          switch (this.command) {\n            case 'm':\n            case 'l':\n            case 'h':\n            case 'v':\n            case 'c':\n            case 's':\n            case 'q':\n            case 't':\n            case 'a':\n            case 'z':\n              return true;\n              break;\n          }\n\n          return false;\n        };\n\n        this.getToken = function () {\n          this.i++;\n          return this.tokens[this.i];\n        };\n\n        this.getScalar = function () {\n          return parseFloat(this.getToken());\n        };\n\n        this.nextCommand = function () {\n          this.previousCommand = this.command;\n          this.command = this.getToken();\n        };\n\n        this.getPoint = function () {\n          var p = new svg.Point(this.getScalar(), this.getScalar());\n          return this.makeAbsolute(p);\n        };\n\n        this.getAsControlPoint = function () {\n          var p = this.getPoint();\n          this.control = p;\n          return p;\n        };\n\n        this.getAsCurrentPoint = function () {\n          var p = this.getPoint();\n          this.current = p;\n          return p;\n        };\n\n        this.getReflectedControlPoint = function () {\n          if (this.previousCommand.toLowerCase() != 'c' && this.previousCommand.toLowerCase() != 's' && this.previousCommand.toLowerCase() != 'q' && this.previousCommand.toLowerCase() != 't') {\n            return this.current;\n          } // reflect point\n\n\n          var p = new svg.Point(2 * this.current.x - this.control.x, 2 * this.current.y - this.control.y);\n          return p;\n        };\n\n        this.makeAbsolute = function (p) {\n          if (this.isRelativeCommand()) {\n            p.x += this.current.x;\n            p.y += this.current.y;\n          }\n\n          return p;\n        };\n\n        this.addMarker = function (p, from, priorTo) {\n          // if the last angle isn't filled in because we didn't have this point yet ...\n          if (priorTo != null && this.angles.length > 0 && this.angles[this.angles.length - 1] == null) {\n            this.angles[this.angles.length - 1] = this.points[this.points.length - 1].angleTo(priorTo);\n          }\n\n          this.addMarkerAngle(p, from == null ? null : from.angleTo(p));\n        };\n\n        this.addMarkerAngle = function (p, a) {\n          this.points.push(p);\n          this.angles.push(a);\n        };\n\n        this.getMarkerPoints = function () {\n          return this.points;\n        };\n\n        this.getMarkerAngles = function () {\n          for (var i = 0; i < this.angles.length; i++) {\n            if (this.angles[i] == null) {\n              for (var j = i + 1; j < this.angles.length; j++) {\n                if (this.angles[j] != null) {\n                  this.angles[i] = this.angles[j];\n                  break;\n                }\n              }\n            }\n          }\n\n          return this.angles;\n        };\n      }(d);\n\n      this.path = function (ctx) {\n        var pp = this.PathParser;\n        pp.reset();\n        var bb = new svg.BoundingBox();\n        if (ctx != null) ctx.beginPath();\n\n        while (!pp.isEnd()) {\n          pp.nextCommand();\n\n          switch (pp.command) {\n            case 'M':\n            case 'm':\n              var p = pp.getAsCurrentPoint();\n              pp.addMarker(p);\n              bb.addPoint(p.x, p.y);\n              if (ctx != null) ctx.moveTo(p.x, p.y);\n              pp.start = pp.current;\n\n              while (!pp.isCommandOrEnd()) {\n                var p = pp.getAsCurrentPoint();\n                pp.addMarker(p, pp.start);\n                bb.addPoint(p.x, p.y);\n                if (ctx != null) ctx.lineTo(p.x, p.y);\n              }\n\n              break;\n\n            case 'L':\n            case 'l':\n              while (!pp.isCommandOrEnd()) {\n                var c = pp.current;\n                var p = pp.getAsCurrentPoint();\n                pp.addMarker(p, c);\n                bb.addPoint(p.x, p.y);\n                if (ctx != null) ctx.lineTo(p.x, p.y);\n              }\n\n              break;\n\n            case 'H':\n            case 'h':\n              while (!pp.isCommandOrEnd()) {\n                var newP = new svg.Point((pp.isRelativeCommand() ? pp.current.x : 0) + pp.getScalar(), pp.current.y);\n                pp.addMarker(newP, pp.current);\n                pp.current = newP;\n                bb.addPoint(pp.current.x, pp.current.y);\n                if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);\n              }\n\n              break;\n\n            case 'V':\n            case 'v':\n              while (!pp.isCommandOrEnd()) {\n                var newP = new svg.Point(pp.current.x, (pp.isRelativeCommand() ? pp.current.y : 0) + pp.getScalar());\n                pp.addMarker(newP, pp.current);\n                pp.current = newP;\n                bb.addPoint(pp.current.x, pp.current.y);\n                if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);\n              }\n\n              break;\n\n            case 'C':\n            case 'c':\n              while (!pp.isCommandOrEnd()) {\n                var curr = pp.current;\n                var p1 = pp.getPoint();\n                var cntrl = pp.getAsControlPoint();\n                var cp = pp.getAsCurrentPoint();\n                pp.addMarker(cp, cntrl, p1);\n                bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);\n                if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);\n              }\n\n              break;\n\n            case 'S':\n            case 's':\n              while (!pp.isCommandOrEnd()) {\n                var curr = pp.current;\n                var p1 = pp.getReflectedControlPoint();\n                var cntrl = pp.getAsControlPoint();\n                var cp = pp.getAsCurrentPoint();\n                pp.addMarker(cp, cntrl, p1);\n                bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);\n                if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);\n              }\n\n              break;\n\n            case 'Q':\n            case 'q':\n              while (!pp.isCommandOrEnd()) {\n                var curr = pp.current;\n                var cntrl = pp.getAsControlPoint();\n                var cp = pp.getAsCurrentPoint();\n                pp.addMarker(cp, cntrl, cntrl);\n                bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);\n                if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);\n              }\n\n              break;\n\n            case 'T':\n            case 't':\n              while (!pp.isCommandOrEnd()) {\n                var curr = pp.current;\n                var cntrl = pp.getReflectedControlPoint();\n                pp.control = cntrl;\n                var cp = pp.getAsCurrentPoint();\n                pp.addMarker(cp, cntrl, cntrl);\n                bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);\n                if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);\n              }\n\n              break;\n\n            case 'A':\n            case 'a':\n              while (!pp.isCommandOrEnd()) {\n                var curr = pp.current;\n                var rx = pp.getScalar();\n                var ry = pp.getScalar();\n                var xAxisRotation = pp.getScalar() * (Math.PI / 180.0);\n                var largeArcFlag = pp.getScalar();\n                var sweepFlag = pp.getScalar();\n                var cp = pp.getAsCurrentPoint(); // Conversion from endpoint to center parameterization\n                // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n                // x1', y1'\n\n                var currp = new svg.Point(Math.cos(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.sin(xAxisRotation) * (curr.y - cp.y) / 2.0, -Math.sin(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.cos(xAxisRotation) * (curr.y - cp.y) / 2.0); // adjust radii\n\n                var l = Math.pow(currp.x, 2) / Math.pow(rx, 2) + Math.pow(currp.y, 2) / Math.pow(ry, 2);\n\n                if (l > 1) {\n                  rx *= Math.sqrt(l);\n                  ry *= Math.sqrt(l);\n                } // cx', cy'\n\n\n                var s = (largeArcFlag == sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rx, 2) * Math.pow(ry, 2) - Math.pow(rx, 2) * Math.pow(currp.y, 2) - Math.pow(ry, 2) * Math.pow(currp.x, 2)) / (Math.pow(rx, 2) * Math.pow(currp.y, 2) + Math.pow(ry, 2) * Math.pow(currp.x, 2)));\n                if (isNaN(s)) s = 0;\n                var cpp = new svg.Point(s * rx * currp.y / ry, s * -ry * currp.x / rx); // cx, cy\n\n                var centp = new svg.Point((curr.x + cp.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (curr.y + cp.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y); // vector magnitude\n\n                var m = function m(v) {\n                  return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n                }; // ratio between two vectors\n\n\n                var r = function r(u, v) {\n                  return (u[0] * v[0] + u[1] * v[1]) / (m(u) * m(v));\n                }; // angle between two vectors\n\n\n                var a = function a(u, v) {\n                  return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(r(u, v));\n                }; // initial angle\n\n\n                var a1 = a([1, 0], [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry]); // angle delta\n\n                var u = [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry];\n                var v = [(-currp.x - cpp.x) / rx, (-currp.y - cpp.y) / ry];\n                var ad = a(u, v);\n                if (r(u, v) <= -1) ad = Math.PI;\n                if (r(u, v) >= 1) ad = 0; // for markers\n\n                var dir = 1 - sweepFlag ? 1.0 : -1.0;\n                var ah = a1 + dir * (ad / 2.0);\n                var halfWay = new svg.Point(centp.x + rx * Math.cos(ah), centp.y + ry * Math.sin(ah));\n                pp.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);\n                pp.addMarkerAngle(cp, ah - dir * Math.PI);\n                bb.addPoint(cp.x, cp.y); // TODO: this is too naive, make it better\n\n                if (ctx != null) {\n                  var r = rx > ry ? rx : ry;\n                  var sx = rx > ry ? 1 : rx / ry;\n                  var sy = rx > ry ? ry / rx : 1;\n                  ctx.translate(centp.x, centp.y);\n                  ctx.rotate(xAxisRotation);\n                  ctx.scale(sx, sy);\n                  ctx.arc(0, 0, r, a1, a1 + ad, 1 - sweepFlag);\n                  ctx.scale(1 / sx, 1 / sy);\n                  ctx.rotate(-xAxisRotation);\n                  ctx.translate(-centp.x, -centp.y);\n                }\n              }\n\n              break;\n\n            case 'Z':\n            case 'z':\n              if (ctx != null) ctx.closePath();\n              pp.current = pp.start;\n          }\n        }\n\n        return bb;\n      };\n\n      this.getMarkers = function () {\n        var points = this.PathParser.getMarkerPoints();\n        var angles = this.PathParser.getMarkerAngles();\n        var markers = [];\n\n        for (var i = 0; i < points.length; i++) {\n          markers.push([points[i], angles[i]]);\n        }\n\n        return markers;\n      };\n    };\n\n    svg.Element.path.prototype = new svg.Element.PathElementBase(); // pattern element\n\n    svg.Element.pattern = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.createPattern = function (ctx, element) {\n        var width = this.attribute('width').toPixels('x', true);\n        var height = this.attribute('height').toPixels('y', true); // render me using a temporary svg element\n\n        var tempSvg = new svg.Element.svg();\n        tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);\n        tempSvg.attributes['width'] = new svg.Property('width', width + 'px');\n        tempSvg.attributes['height'] = new svg.Property('height', height + 'px');\n        tempSvg.attributes['transform'] = new svg.Property('transform', this.attribute('patternTransform').value);\n        tempSvg.children = this.children;\n        var c = document.createElement('canvas');\n        c.width = width;\n        c.height = height;\n        var cctx = c.getContext('2d');\n\n        if (this.attribute('x').hasValue() && this.attribute('y').hasValue()) {\n          cctx.translate(this.attribute('x').toPixels('x', true), this.attribute('y').toPixels('y', true));\n        } // render 3x3 grid so when we transform there's no white space on edges\n\n\n        for (var x = -1; x <= 1; x++) {\n          for (var y = -1; y <= 1; y++) {\n            cctx.save();\n            tempSvg.attributes['x'] = new svg.Property('x', x * c.width);\n            tempSvg.attributes['y'] = new svg.Property('y', y * c.height);\n            tempSvg.render(cctx);\n            cctx.restore();\n          }\n        }\n\n        var pattern = ctx.createPattern(c, 'repeat');\n        return pattern;\n      };\n    };\n\n    svg.Element.pattern.prototype = new svg.Element.ElementBase(); // marker element\n\n    svg.Element.marker = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.baseRender = this.render;\n\n      this.render = function (ctx, point, angle) {\n        ctx.translate(point.x, point.y);\n        if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(angle);\n        if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(ctx.lineWidth, ctx.lineWidth);\n        ctx.save(); // render me using a temporary svg element\n\n        var tempSvg = new svg.Element.svg();\n        tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);\n        tempSvg.attributes['refX'] = new svg.Property('refX', this.attribute('refX').value);\n        tempSvg.attributes['refY'] = new svg.Property('refY', this.attribute('refY').value);\n        tempSvg.attributes['width'] = new svg.Property('width', this.attribute('markerWidth').value);\n        tempSvg.attributes['height'] = new svg.Property('height', this.attribute('markerHeight').value);\n        tempSvg.attributes['fill'] = new svg.Property('fill', this.attribute('fill').valueOrDefault('black'));\n        tempSvg.attributes['stroke'] = new svg.Property('stroke', this.attribute('stroke').valueOrDefault('none'));\n        tempSvg.children = this.children;\n        tempSvg.render(ctx);\n        ctx.restore();\n        if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);\n        if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(-angle);\n        ctx.translate(-point.x, -point.y);\n      };\n    };\n\n    svg.Element.marker.prototype = new svg.Element.ElementBase(); // definitions element\n\n    svg.Element.defs = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.render = function (ctx) {// NOOP\n      };\n    };\n\n    svg.Element.defs.prototype = new svg.Element.ElementBase(); // base for gradients\n\n    svg.Element.GradientBase = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.stops = [];\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        if (child.type == 'stop') this.stops.push(child);\n      }\n\n      this.getGradient = function () {// OVERRIDE ME!\n      };\n\n      this.gradientUnits = function () {\n        return this.attribute('gradientUnits').valueOrDefault('objectBoundingBox');\n      };\n\n      this.attributesToInherit = ['gradientUnits'];\n\n      this.inheritStopContainer = function (stopsContainer) {\n        for (var i = 0; i < this.attributesToInherit.length; i++) {\n          var attributeToInherit = this.attributesToInherit[i];\n\n          if (!this.attribute(attributeToInherit).hasValue() && stopsContainer.attribute(attributeToInherit).hasValue()) {\n            this.attribute(attributeToInherit, true).value = stopsContainer.attribute(attributeToInherit).value;\n          }\n        }\n      };\n\n      this.createGradient = function (ctx, element, parentOpacityProp) {\n        var stopsContainer = this;\n\n        if (this.getHrefAttribute().hasValue()) {\n          stopsContainer = this.getHrefAttribute().getDefinition();\n          this.inheritStopContainer(stopsContainer);\n        }\n\n        var addParentOpacity = function addParentOpacity(color) {\n          if (parentOpacityProp.hasValue()) {\n            var p = new svg.Property('color', color);\n            return p.addOpacity(parentOpacityProp).value;\n          }\n\n          return color;\n        };\n\n        var g = this.getGradient(ctx, element);\n        if (g == null) return addParentOpacity(stopsContainer.stops[stopsContainer.stops.length - 1].color);\n\n        for (var i = 0; i < stopsContainer.stops.length; i++) {\n          g.addColorStop(stopsContainer.stops[i].offset, addParentOpacity(stopsContainer.stops[i].color));\n        }\n\n        if (this.attribute('gradientTransform').hasValue()) {\n          // render as transformed pattern on temporary canvas\n          var rootView = svg.ViewPort.viewPorts[0];\n          var rect = new svg.Element.rect();\n          rect.attributes['x'] = new svg.Property('x', -svg.MAX_VIRTUAL_PIXELS / 3.0);\n          rect.attributes['y'] = new svg.Property('y', -svg.MAX_VIRTUAL_PIXELS / 3.0);\n          rect.attributes['width'] = new svg.Property('width', svg.MAX_VIRTUAL_PIXELS);\n          rect.attributes['height'] = new svg.Property('height', svg.MAX_VIRTUAL_PIXELS);\n          var group = new svg.Element.g();\n          group.attributes['transform'] = new svg.Property('transform', this.attribute('gradientTransform').value);\n          group.children = [rect];\n          var tempSvg = new svg.Element.svg();\n          tempSvg.attributes['x'] = new svg.Property('x', 0);\n          tempSvg.attributes['y'] = new svg.Property('y', 0);\n          tempSvg.attributes['width'] = new svg.Property('width', rootView.width);\n          tempSvg.attributes['height'] = new svg.Property('height', rootView.height);\n          tempSvg.children = [group];\n          var c = document.createElement('canvas');\n          c.width = rootView.width;\n          c.height = rootView.height;\n          var tempCtx = c.getContext('2d');\n          tempCtx.fillStyle = g;\n          tempSvg.render(tempCtx);\n          return tempCtx.createPattern(c, 'no-repeat');\n        }\n\n        return g;\n      };\n    };\n\n    svg.Element.GradientBase.prototype = new svg.Element.ElementBase(); // linear gradient element\n\n    svg.Element.linearGradient = function (node) {\n      this.base = svg.Element.GradientBase;\n      this.base(node);\n      this.attributesToInherit.push('x1');\n      this.attributesToInherit.push('y1');\n      this.attributesToInherit.push('x2');\n      this.attributesToInherit.push('y2');\n\n      this.getGradient = function (ctx, element) {\n        var bb = this.gradientUnits() == 'objectBoundingBox' ? element.getBoundingBox() : null;\n\n        if (!this.attribute('x1').hasValue() && !this.attribute('y1').hasValue() && !this.attribute('x2').hasValue() && !this.attribute('y2').hasValue()) {\n          this.attribute('x1', true).value = 0;\n          this.attribute('y1', true).value = 0;\n          this.attribute('x2', true).value = 1;\n          this.attribute('y2', true).value = 0;\n        }\n\n        var x1 = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('x1').numValue() : this.attribute('x1').toPixels('x');\n        var y1 = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('y1').numValue() : this.attribute('y1').toPixels('y');\n        var x2 = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('x2').numValue() : this.attribute('x2').toPixels('x');\n        var y2 = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('y2').numValue() : this.attribute('y2').toPixels('y');\n        if (x1 == x2 && y1 == y2) return null;\n        return ctx.createLinearGradient(x1, y1, x2, y2);\n      };\n    };\n\n    svg.Element.linearGradient.prototype = new svg.Element.GradientBase(); // radial gradient element\n\n    svg.Element.radialGradient = function (node) {\n      this.base = svg.Element.GradientBase;\n      this.base(node);\n      this.attributesToInherit.push('cx');\n      this.attributesToInherit.push('cy');\n      this.attributesToInherit.push('r');\n      this.attributesToInherit.push('fx');\n      this.attributesToInherit.push('fy');\n\n      this.getGradient = function (ctx, element) {\n        var bb = element.getBoundingBox();\n        if (!this.attribute('cx').hasValue()) this.attribute('cx', true).value = '50%';\n        if (!this.attribute('cy').hasValue()) this.attribute('cy', true).value = '50%';\n        if (!this.attribute('r').hasValue()) this.attribute('r', true).value = '50%';\n        var cx = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('cx').numValue() : this.attribute('cx').toPixels('x');\n        var cy = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('cy').numValue() : this.attribute('cy').toPixels('y');\n        var fx = cx;\n        var fy = cy;\n\n        if (this.attribute('fx').hasValue()) {\n          fx = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('fx').numValue() : this.attribute('fx').toPixels('x');\n        }\n\n        if (this.attribute('fy').hasValue()) {\n          fy = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('fy').numValue() : this.attribute('fy').toPixels('y');\n        }\n\n        var r = this.gradientUnits() == 'objectBoundingBox' ? (bb.width() + bb.height()) / 2.0 * this.attribute('r').numValue() : this.attribute('r').toPixels();\n        return ctx.createRadialGradient(fx, fy, 0, cx, cy, r);\n      };\n    };\n\n    svg.Element.radialGradient.prototype = new svg.Element.GradientBase(); // gradient stop element\n\n    svg.Element.stop = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.offset = this.attribute('offset').numValue();\n      if (this.offset < 0) this.offset = 0;\n      if (this.offset > 1) this.offset = 1;\n      var stopColor = this.style('stop-color', true);\n      if (stopColor.value === '') stopColor.value = '#000';\n      if (this.style('stop-opacity').hasValue()) stopColor = stopColor.addOpacity(this.style('stop-opacity'));\n      this.color = stopColor.value;\n    };\n\n    svg.Element.stop.prototype = new svg.Element.ElementBase(); // animation base element\n\n    svg.Element.AnimateBase = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      svg.Animations.push(this);\n      this.duration = 0.0;\n      this.begin = this.attribute('begin').toMilliseconds();\n      this.maxDuration = this.begin + this.attribute('dur').toMilliseconds();\n\n      this.getProperty = function () {\n        var attributeType = this.attribute('attributeType').value;\n        var attributeName = this.attribute('attributeName').value;\n\n        if (attributeType == 'CSS') {\n          return this.parent.style(attributeName, true);\n        }\n\n        return this.parent.attribute(attributeName, true);\n      };\n\n      this.initialValue = null;\n      this.initialUnits = '';\n      this.removed = false;\n\n      this.calcValue = function () {\n        // OVERRIDE ME!\n        return '';\n      };\n\n      this.update = function (delta) {\n        // set initial value\n        if (this.initialValue == null) {\n          this.initialValue = this.getProperty().value;\n          this.initialUnits = this.getProperty().getUnits();\n        } // if we're past the end time\n\n\n        if (this.duration > this.maxDuration) {\n          // loop for indefinitely repeating animations\n          if (this.attribute('repeatCount').value == 'indefinite' || this.attribute('repeatDur').value == 'indefinite') {\n            this.duration = 0.0;\n          } else if (this.attribute('fill').valueOrDefault('remove') == 'freeze' && !this.frozen) {\n            this.frozen = true;\n            this.parent.animationFrozen = true;\n            this.parent.animationFrozenValue = this.getProperty().value;\n          } else if (this.attribute('fill').valueOrDefault('remove') == 'remove' && !this.removed) {\n            this.removed = true;\n            this.getProperty().value = this.parent.animationFrozen ? this.parent.animationFrozenValue : this.initialValue;\n            return true;\n          }\n\n          return false;\n        }\n\n        this.duration = this.duration + delta; // if we're past the begin time\n\n        var updated = false;\n\n        if (this.begin < this.duration) {\n          var newValue = this.calcValue(); // tween\n\n          if (this.attribute('type').hasValue()) {\n            // for transform, etc.\n            var type = this.attribute('type').value;\n            newValue = type + '(' + newValue + ')';\n          }\n\n          this.getProperty().value = newValue;\n          updated = true;\n        }\n\n        return updated;\n      };\n\n      this.from = this.attribute('from');\n      this.to = this.attribute('to');\n      this.values = this.attribute('values');\n      if (this.values.hasValue()) this.values.value = this.values.value.split(';'); // fraction of duration we've covered\n\n      this.progress = function () {\n        var ret = {\n          progress: (this.duration - this.begin) / (this.maxDuration - this.begin)\n        };\n\n        if (this.values.hasValue()) {\n          var p = ret.progress * (this.values.value.length - 1);\n          var lb = Math.floor(p),\n              ub = Math.ceil(p);\n          ret.from = new svg.Property('from', parseFloat(this.values.value[lb]));\n          ret.to = new svg.Property('to', parseFloat(this.values.value[ub]));\n          ret.progress = (p - lb) / (ub - lb);\n        } else {\n          ret.from = this.from;\n          ret.to = this.to;\n        }\n\n        return ret;\n      };\n    };\n\n    svg.Element.AnimateBase.prototype = new svg.Element.ElementBase(); // animate element\n\n    svg.Element.animate = function (node) {\n      this.base = svg.Element.AnimateBase;\n      this.base(node);\n\n      this.calcValue = function () {\n        var p = this.progress(); // tween value linearly\n\n        var newValue = p.from.numValue() + (p.to.numValue() - p.from.numValue()) * p.progress;\n        return newValue + this.initialUnits;\n      };\n    };\n\n    svg.Element.animate.prototype = new svg.Element.AnimateBase(); // animate color element\n\n    svg.Element.animateColor = function (node) {\n      this.base = svg.Element.AnimateBase;\n      this.base(node);\n\n      this.calcValue = function () {\n        var p = this.progress();\n        var from = new RGBColor(p.from.value);\n        var to = new RGBColor(p.to.value);\n\n        if (from.ok && to.ok) {\n          // tween color linearly\n          var r = from.r + (to.r - from.r) * p.progress;\n          var g = from.g + (to.g - from.g) * p.progress;\n          var b = from.b + (to.b - from.b) * p.progress;\n          return 'rgb(' + parseInt(r, 10) + ',' + parseInt(g, 10) + ',' + parseInt(b, 10) + ')';\n        }\n\n        return this.attribute('from').value;\n      };\n    };\n\n    svg.Element.animateColor.prototype = new svg.Element.AnimateBase(); // animate transform element\n\n    svg.Element.animateTransform = function (node) {\n      this.base = svg.Element.AnimateBase;\n      this.base(node);\n\n      this.calcValue = function () {\n        var p = this.progress(); // tween value linearly\n\n        var from = svg.ToNumberArray(p.from.value);\n        var to = svg.ToNumberArray(p.to.value);\n        var newValue = '';\n\n        for (var i = 0; i < from.length; i++) {\n          newValue += from[i] + (to[i] - from[i]) * p.progress + ' ';\n        }\n\n        return newValue;\n      };\n    };\n\n    svg.Element.animateTransform.prototype = new svg.Element.animate(); // font element\n\n    svg.Element.font = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.horizAdvX = this.attribute('horiz-adv-x').numValue();\n      this.isRTL = false;\n      this.isArabic = false;\n      this.fontFace = null;\n      this.missingGlyph = null;\n      this.glyphs = [];\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n\n        if (child.type == 'font-face') {\n          this.fontFace = child;\n\n          if (child.style('font-family').hasValue()) {\n            svg.Definitions[child.style('font-family').value] = this;\n          }\n        } else if (child.type == 'missing-glyph') this.missingGlyph = child;else if (child.type == 'glyph') {\n          if (child.arabicForm != '') {\n            this.isRTL = true;\n            this.isArabic = true;\n            if (typeof this.glyphs[child.unicode] == 'undefined') this.glyphs[child.unicode] = [];\n            this.glyphs[child.unicode][child.arabicForm] = child;\n          } else {\n            this.glyphs[child.unicode] = child;\n          }\n        }\n      }\n    };\n\n    svg.Element.font.prototype = new svg.Element.ElementBase(); // font-face element\n\n    svg.Element.fontface = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.ascent = this.attribute('ascent').value;\n      this.descent = this.attribute('descent').value;\n      this.unitsPerEm = this.attribute('units-per-em').numValue();\n    };\n\n    svg.Element.fontface.prototype = new svg.Element.ElementBase(); // missing-glyph element\n\n    svg.Element.missingglyph = function (node) {\n      this.base = svg.Element.path;\n      this.base(node);\n      this.horizAdvX = 0;\n    };\n\n    svg.Element.missingglyph.prototype = new svg.Element.path(); // glyph element\n\n    svg.Element.glyph = function (node) {\n      this.base = svg.Element.path;\n      this.base(node);\n      this.horizAdvX = this.attribute('horiz-adv-x').numValue();\n      this.unicode = this.attribute('unicode').value;\n      this.arabicForm = this.attribute('arabic-form').value;\n    };\n\n    svg.Element.glyph.prototype = new svg.Element.path(); // text element\n\n    svg.Element.text = function (node) {\n      this.captureTextNodes = true;\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n      this.baseSetContext = this.setContext;\n\n      this.setContext = function (ctx) {\n        this.baseSetContext(ctx);\n        var textBaseline = this.style('dominant-baseline').toTextBaseline();\n        if (textBaseline == null) textBaseline = this.style('alignment-baseline').toTextBaseline();\n        if (textBaseline != null) ctx.textBaseline = textBaseline;\n      };\n\n      this.getBoundingBox = function () {\n        var x = this.attribute('x').toPixels('x');\n        var y = this.attribute('y').toPixels('y');\n        var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);\n        return new svg.BoundingBox(x, y - fontSize, x + Math.floor(fontSize * 2.0 / 3.0) * this.children[0].getText().length, y);\n      };\n\n      this.renderChildren = function (ctx) {\n        this.x = this.attribute('x').toPixels('x');\n        this.y = this.attribute('y').toPixels('y');\n        if (this.attribute('dx').hasValue()) this.x += this.attribute('dx').toPixels('x');\n        if (this.attribute('dy').hasValue()) this.y += this.attribute('dy').toPixels('y');\n        this.x += this.getAnchorDelta(ctx, this, 0);\n\n        for (var i = 0; i < this.children.length; i++) {\n          this.renderChild(ctx, this, i);\n        }\n      };\n\n      this.getAnchorDelta = function (ctx, parent, startI) {\n        var textAnchor = this.style('text-anchor').valueOrDefault('start');\n\n        if (textAnchor != 'start') {\n          var width = 0;\n\n          for (var i = startI; i < parent.children.length; i++) {\n            var child = parent.children[i];\n            if (i > startI && child.attribute('x').hasValue()) break; // new group\n\n            width += child.measureTextRecursive(ctx);\n          }\n\n          return -1 * (textAnchor == 'end' ? width : width / 2.0);\n        }\n\n        return 0;\n      };\n\n      this.renderChild = function (ctx, parent, i) {\n        var child = parent.children[i];\n\n        if (child.attribute('x').hasValue()) {\n          child.x = child.attribute('x').toPixels('x') + parent.getAnchorDelta(ctx, parent, i);\n          if (child.attribute('dx').hasValue()) child.x += child.attribute('dx').toPixels('x');\n        } else {\n          if (child.attribute('dx').hasValue()) parent.x += child.attribute('dx').toPixels('x');\n          child.x = parent.x;\n        }\n\n        parent.x = child.x + child.measureText(ctx);\n\n        if (child.attribute('y').hasValue()) {\n          child.y = child.attribute('y').toPixels('y');\n          if (child.attribute('dy').hasValue()) child.y += child.attribute('dy').toPixels('y');\n        } else {\n          if (child.attribute('dy').hasValue()) parent.y += child.attribute('dy').toPixels('y');\n          child.y = parent.y;\n        }\n\n        parent.y = child.y;\n        child.render(ctx);\n\n        for (var i = 0; i < child.children.length; i++) {\n          parent.renderChild(ctx, child, i);\n        }\n      };\n    };\n\n    svg.Element.text.prototype = new svg.Element.RenderedElementBase(); // text base\n\n    svg.Element.TextElementBase = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n\n      this.getGlyph = function (font, text, i) {\n        var c = text[i];\n        var glyph = null;\n\n        if (font.isArabic) {\n          var arabicForm = 'isolated';\n          if ((i == 0 || text[i - 1] == ' ') && i < text.length - 2 && text[i + 1] != ' ') arabicForm = 'terminal';\n          if (i > 0 && text[i - 1] != ' ' && i < text.length - 2 && text[i + 1] != ' ') arabicForm = 'medial';\n          if (i > 0 && text[i - 1] != ' ' && (i == text.length - 1 || text[i + 1] == ' ')) arabicForm = 'initial';\n\n          if (typeof font.glyphs[c] != 'undefined') {\n            glyph = font.glyphs[c][arabicForm];\n            if (glyph == null && font.glyphs[c].type == 'glyph') glyph = font.glyphs[c];\n          }\n        } else {\n          glyph = font.glyphs[c];\n        }\n\n        if (glyph == null) glyph = font.missingGlyph;\n        return glyph;\n      };\n\n      this.renderChildren = function (ctx) {\n        var customFont = this.parent.style('font-family').getDefinition();\n\n        if (customFont != null) {\n          var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);\n          var fontStyle = this.parent.style('font-style').valueOrDefault(svg.Font.Parse(svg.ctx.font).fontStyle);\n          var text = this.getText();\n          if (customFont.isRTL) text = text.split(\"\").reverse().join(\"\");\n          var dx = svg.ToNumberArray(this.parent.attribute('dx').value);\n\n          for (var i = 0; i < text.length; i++) {\n            var glyph = this.getGlyph(customFont, text, i);\n            var scale = fontSize / customFont.fontFace.unitsPerEm;\n            ctx.translate(this.x, this.y);\n            ctx.scale(scale, -scale);\n            var lw = ctx.lineWidth;\n            ctx.lineWidth = ctx.lineWidth * customFont.fontFace.unitsPerEm / fontSize;\n            if (fontStyle == 'italic') ctx.transform(1, 0, .4, 1, 0, 0);\n            glyph.render(ctx);\n            if (fontStyle == 'italic') ctx.transform(1, 0, -.4, 1, 0, 0);\n            ctx.lineWidth = lw;\n            ctx.scale(1 / scale, -1 / scale);\n            ctx.translate(-this.x, -this.y);\n            this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / customFont.fontFace.unitsPerEm;\n\n            if (typeof dx[i] != 'undefined' && !isNaN(dx[i])) {\n              this.x += dx[i];\n            }\n          }\n\n          return;\n        }\n\n        if (ctx.fillStyle != '') ctx.fillText(svg.compressSpaces(this.getText()), this.x, this.y);\n        if (ctx.strokeStyle != '') ctx.strokeText(svg.compressSpaces(this.getText()), this.x, this.y);\n      };\n\n      this.getText = function () {// OVERRIDE ME\n      };\n\n      this.measureTextRecursive = function (ctx) {\n        var width = this.measureText(ctx);\n\n        for (var i = 0; i < this.children.length; i++) {\n          width += this.children[i].measureTextRecursive(ctx);\n        }\n\n        return width;\n      };\n\n      this.measureText = function (ctx) {\n        var customFont = this.parent.style('font-family').getDefinition();\n\n        if (customFont != null) {\n          var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);\n          var measure = 0;\n          var text = this.getText();\n          if (customFont.isRTL) text = text.split(\"\").reverse().join(\"\");\n          var dx = svg.ToNumberArray(this.parent.attribute('dx').value);\n\n          for (var i = 0; i < text.length; i++) {\n            var glyph = this.getGlyph(customFont, text, i);\n            measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;\n\n            if (typeof dx[i] != 'undefined' && !isNaN(dx[i])) {\n              measure += dx[i];\n            }\n          }\n\n          return measure;\n        }\n\n        var textToMeasure = svg.compressSpaces(this.getText());\n        if (!ctx.measureText) return textToMeasure.length * 10;\n        ctx.save();\n        this.setContext(ctx);\n        var width = ctx.measureText(textToMeasure).width;\n        ctx.restore();\n        return width;\n      };\n    };\n\n    svg.Element.TextElementBase.prototype = new svg.Element.RenderedElementBase(); // tspan\n\n    svg.Element.tspan = function (node) {\n      this.captureTextNodes = true;\n      this.base = svg.Element.TextElementBase;\n      this.base(node);\n      this.text = svg.compressSpaces(node.value || node.text || node.textContent || '');\n\n      this.getText = function () {\n        // if this node has children, then they own the text\n        if (this.children.length > 0) {\n          return '';\n        }\n\n        return this.text;\n      };\n    };\n\n    svg.Element.tspan.prototype = new svg.Element.TextElementBase(); // tref\n\n    svg.Element.tref = function (node) {\n      this.base = svg.Element.TextElementBase;\n      this.base(node);\n\n      this.getText = function () {\n        var element = this.getHrefAttribute().getDefinition();\n        if (element != null) return element.children[0].getText();\n      };\n    };\n\n    svg.Element.tref.prototype = new svg.Element.TextElementBase(); // a element\n\n    svg.Element.a = function (node) {\n      this.base = svg.Element.TextElementBase;\n      this.base(node);\n      this.hasText = node.childNodes.length > 0;\n\n      for (var i = 0; i < node.childNodes.length; i++) {\n        if (node.childNodes[i].nodeType != 3) this.hasText = false;\n      } // this might contain text\n\n\n      this.text = this.hasText ? node.childNodes[0].value : '';\n\n      this.getText = function () {\n        return this.text;\n      };\n\n      this.baseRenderChildren = this.renderChildren;\n\n      this.renderChildren = function (ctx) {\n        if (this.hasText) {\n          // render as text element\n          this.baseRenderChildren(ctx);\n          var fontSize = new svg.Property('fontSize', svg.Font.Parse(svg.ctx.font).fontSize);\n          svg.Mouse.checkBoundingBox(this, new svg.BoundingBox(this.x, this.y - fontSize.toPixels('y'), this.x + this.measureText(ctx), this.y));\n        } else if (this.children.length > 0) {\n          // render as temporary group\n          var g = new svg.Element.g();\n          g.children = this.children;\n          g.parent = this;\n          g.render(ctx);\n        }\n      };\n\n      this.onclick = function () {\n        window.open(this.getHrefAttribute().value);\n      };\n\n      this.onmousemove = function () {\n        svg.ctx.canvas.style.cursor = 'pointer';\n      };\n    };\n\n    svg.Element.a.prototype = new svg.Element.TextElementBase(); // image element\n\n    svg.Element.image = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n      var href = this.getHrefAttribute().value;\n\n      if (href == '') {\n        return;\n      }\n\n      var isSvg = href.match(/\\.svg$/);\n      svg.Images.push(this);\n      this.loaded = false;\n\n      if (!isSvg) {\n        this.img = document.createElement('img');\n\n        if (svg.opts['useCORS'] == true) {\n          this.img.crossOrigin = 'Anonymous';\n        }\n\n        var self = this;\n\n        this.img.onload = function () {\n          self.loaded = true;\n        };\n\n        this.img.onerror = function () {\n          svg.log('ERROR: image \"' + href + '\" not found');\n          self.loaded = true;\n        };\n\n        this.img.src = href;\n      } else {\n        this.img = svg.ajax(href);\n        this.loaded = true;\n      }\n\n      this.renderChildren = function (ctx) {\n        var x = this.attribute('x').toPixels('x');\n        var y = this.attribute('y').toPixels('y');\n        var width = this.attribute('width').toPixels('x');\n        var height = this.attribute('height').toPixels('y');\n        if (width == 0 || height == 0) return;\n        ctx.save();\n\n        if (isSvg) {\n          ctx.drawSvg(this.img, x, y, width, height);\n        } else {\n          ctx.translate(x, y);\n          svg.AspectRatio(ctx, this.attribute('preserveAspectRatio').value, width, this.img.width, height, this.img.height, 0, 0);\n          ctx.drawImage(this.img, 0, 0);\n        }\n\n        ctx.restore();\n      };\n\n      this.getBoundingBox = function () {\n        var x = this.attribute('x').toPixels('x');\n        var y = this.attribute('y').toPixels('y');\n        var width = this.attribute('width').toPixels('x');\n        var height = this.attribute('height').toPixels('y');\n        return new svg.BoundingBox(x, y, x + width, y + height);\n      };\n    };\n\n    svg.Element.image.prototype = new svg.Element.RenderedElementBase(); // group element\n\n    svg.Element.g = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n\n      this.getBoundingBox = function () {\n        var bb = new svg.BoundingBox();\n\n        for (var i = 0; i < this.children.length; i++) {\n          bb.addBoundingBox(this.children[i].getBoundingBox());\n        }\n\n        return bb;\n      };\n    };\n\n    svg.Element.g.prototype = new svg.Element.RenderedElementBase(); // symbol element\n\n    svg.Element.symbol = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n\n      this.render = function (ctx) {// NO RENDER\n      };\n    };\n\n    svg.Element.symbol.prototype = new svg.Element.RenderedElementBase(); // style element\n\n    svg.Element.style = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node); // text, or spaces then CDATA\n\n      var css = '';\n\n      for (var i = 0; i < node.childNodes.length; i++) {\n        css += node.childNodes[i].data;\n      }\n\n      css = css.replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*\\/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, ''); // remove comments\n\n      css = svg.compressSpaces(css); // replace whitespace\n\n      var cssDefs = css.split('}');\n\n      for (var i = 0; i < cssDefs.length; i++) {\n        if (svg.trim(cssDefs[i]) != '') {\n          var cssDef = cssDefs[i].split('{');\n          var cssClasses = cssDef[0].split(',');\n          var cssProps = cssDef[1].split(';');\n\n          for (var j = 0; j < cssClasses.length; j++) {\n            var cssClass = svg.trim(cssClasses[j]);\n\n            if (cssClass != '') {\n              var props = {};\n\n              for (var k = 0; k < cssProps.length; k++) {\n                var prop = cssProps[k].indexOf(':');\n                var name = cssProps[k].substr(0, prop);\n                var value = cssProps[k].substr(prop + 1, cssProps[k].length - prop);\n\n                if (name != null && value != null) {\n                  props[svg.trim(name)] = new svg.Property(svg.trim(name), svg.trim(value));\n                }\n              }\n\n              svg.Styles[cssClass] = props;\n              svg.StylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);\n\n              if (cssClass == '@font-face') {\n                var fontFamily = props['font-family'].value.replace(/\"/g, '');\n                var srcs = props['src'].value.split(',');\n\n                for (var s = 0; s < srcs.length; s++) {\n                  if (srcs[s].indexOf('format(\"svg\")') > 0) {\n                    var urlStart = srcs[s].indexOf('url');\n                    var urlEnd = srcs[s].indexOf(')', urlStart);\n                    var url = srcs[s].substr(urlStart + 5, urlEnd - urlStart - 6);\n                    var doc = svg.parseXml(svg.ajax(url));\n                    var fonts = doc.getElementsByTagName('font');\n\n                    for (var f = 0; f < fonts.length; f++) {\n                      var font = svg.CreateElement(fonts[f]);\n                      svg.Definitions[fontFamily] = font;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    svg.Element.style.prototype = new svg.Element.ElementBase(); // use element\n\n    svg.Element.use = function (node) {\n      this.base = svg.Element.RenderedElementBase;\n      this.base(node);\n      this.baseSetContext = this.setContext;\n\n      this.setContext = function (ctx) {\n        this.baseSetContext(ctx);\n        if (this.attribute('x').hasValue()) ctx.translate(this.attribute('x').toPixels('x'), 0);\n        if (this.attribute('y').hasValue()) ctx.translate(0, this.attribute('y').toPixels('y'));\n      };\n\n      var element = this.getHrefAttribute().getDefinition();\n\n      this.path = function (ctx) {\n        if (element != null) element.path(ctx);\n      };\n\n      this.getBoundingBox = function () {\n        if (element != null) return element.getBoundingBox();\n      };\n\n      this.renderChildren = function (ctx) {\n        if (element != null) {\n          var tempSvg = element;\n\n          if (element.type == 'symbol') {\n            // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)\n            tempSvg = new svg.Element.svg();\n            tempSvg.type = 'svg';\n            tempSvg.attributes['viewBox'] = new svg.Property('viewBox', element.attribute('viewBox').value);\n            tempSvg.attributes['preserveAspectRatio'] = new svg.Property('preserveAspectRatio', element.attribute('preserveAspectRatio').value);\n            tempSvg.attributes['overflow'] = new svg.Property('overflow', element.attribute('overflow').value);\n            tempSvg.children = element.children;\n          }\n\n          if (tempSvg.type == 'svg') {\n            // if symbol or svg, inherit width/height from me\n            if (this.attribute('width').hasValue()) tempSvg.attributes['width'] = new svg.Property('width', this.attribute('width').value);\n            if (this.attribute('height').hasValue()) tempSvg.attributes['height'] = new svg.Property('height', this.attribute('height').value);\n          }\n\n          var oldParent = tempSvg.parent;\n          tempSvg.parent = null;\n          tempSvg.render(ctx);\n          tempSvg.parent = oldParent;\n        }\n      };\n    };\n\n    svg.Element.use.prototype = new svg.Element.RenderedElementBase(); // mask element\n\n    svg.Element.mask = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.apply = function (ctx, element) {\n        // render as temp svg\n        var x = this.attribute('x').toPixels('x');\n        var y = this.attribute('y').toPixels('y');\n        var width = this.attribute('width').toPixels('x');\n        var height = this.attribute('height').toPixels('y');\n\n        if (width == 0 && height == 0) {\n          var bb = new svg.BoundingBox();\n\n          for (var i = 0; i < this.children.length; i++) {\n            bb.addBoundingBox(this.children[i].getBoundingBox());\n          }\n\n          var x = Math.floor(bb.x1);\n          var y = Math.floor(bb.y1);\n          var width = Math.floor(bb.width());\n          var height = Math.floor(bb.height());\n        } // temporarily remove mask to avoid recursion\n\n\n        var mask = element.attribute('mask').value;\n        element.attribute('mask').value = '';\n        var cMask = document.createElement('canvas');\n        cMask.width = x + width;\n        cMask.height = y + height;\n        var maskCtx = cMask.getContext('2d');\n        this.renderChildren(maskCtx);\n        var c = document.createElement('canvas');\n        c.width = x + width;\n        c.height = y + height;\n        var tempCtx = c.getContext('2d');\n        element.render(tempCtx);\n        tempCtx.globalCompositeOperation = 'destination-in';\n        tempCtx.fillStyle = maskCtx.createPattern(cMask, 'no-repeat');\n        tempCtx.fillRect(0, 0, x + width, y + height);\n        ctx.fillStyle = tempCtx.createPattern(c, 'no-repeat');\n        ctx.fillRect(0, 0, x + width, y + height); // reassign mask\n\n        element.attribute('mask').value = mask;\n      };\n\n      this.render = function (ctx) {// NO RENDER\n      };\n    };\n\n    svg.Element.mask.prototype = new svg.Element.ElementBase(); // clip element\n\n    svg.Element.clipPath = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.apply = function (ctx) {\n        var oldBeginPath = CanvasRenderingContext2D.prototype.beginPath;\n\n        CanvasRenderingContext2D.prototype.beginPath = function () {};\n\n        var oldClosePath = CanvasRenderingContext2D.prototype.closePath;\n\n        CanvasRenderingContext2D.prototype.closePath = function () {};\n\n        oldBeginPath.call(ctx);\n\n        for (var i = 0; i < this.children.length; i++) {\n          var child = this.children[i];\n\n          if (typeof child.path != 'undefined') {\n            var transform = null;\n\n            if (child.style('transform', false, true).hasValue()) {\n              transform = new svg.Transform(child.style('transform', false, true).value);\n              transform.apply(ctx);\n            }\n\n            child.path(ctx);\n            CanvasRenderingContext2D.prototype.closePath = oldClosePath;\n\n            if (transform) {\n              transform.unapply(ctx);\n            }\n          }\n        }\n\n        oldClosePath.call(ctx);\n        ctx.clip();\n        CanvasRenderingContext2D.prototype.beginPath = oldBeginPath;\n        CanvasRenderingContext2D.prototype.closePath = oldClosePath;\n      };\n\n      this.render = function (ctx) {// NO RENDER\n      };\n    };\n\n    svg.Element.clipPath.prototype = new svg.Element.ElementBase(); // filters\n\n    svg.Element.filter = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.apply = function (ctx, element) {\n        // render as temp svg\n        var bb = element.getBoundingBox();\n        var x = Math.floor(bb.x1);\n        var y = Math.floor(bb.y1);\n        var width = Math.floor(bb.width());\n        var height = Math.floor(bb.height()); // temporarily remove filter to avoid recursion\n\n        var filter = element.style('filter').value;\n        element.style('filter').value = '';\n        var px = 0,\n            py = 0;\n\n        for (var i = 0; i < this.children.length; i++) {\n          var efd = this.children[i].extraFilterDistance || 0;\n          px = Math.max(px, efd);\n          py = Math.max(py, efd);\n        }\n\n        var c = document.createElement('canvas');\n        c.width = width + 2 * px;\n        c.height = height + 2 * py;\n        var tempCtx = c.getContext('2d');\n        tempCtx.translate(-x + px, -y + py);\n        element.render(tempCtx); // apply filters\n\n        for (var i = 0; i < this.children.length; i++) {\n          if (typeof this.children[i].apply === 'function') {\n            this.children[i].apply(tempCtx, 0, 0, width + 2 * px, height + 2 * py);\n          }\n        } // render on me\n\n\n        ctx.drawImage(c, 0, 0, width + 2 * px, height + 2 * py, x - px, y - py, width + 2 * px, height + 2 * py); // reassign filter\n\n        element.style('filter', true).value = filter;\n      };\n\n      this.render = function (ctx) {// NO RENDER\n      };\n    };\n\n    svg.Element.filter.prototype = new svg.Element.ElementBase();\n\n    svg.Element.feMorphology = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.apply = function (ctx, x, y, width, height) {// TODO: implement\n      };\n    };\n\n    svg.Element.feMorphology.prototype = new svg.Element.ElementBase();\n\n    svg.Element.feComposite = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n\n      this.apply = function (ctx, x, y, width, height) {// TODO: implement\n      };\n    };\n\n    svg.Element.feComposite.prototype = new svg.Element.ElementBase();\n\n    svg.Element.feColorMatrix = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      var matrix = svg.ToNumberArray(this.attribute('values').value);\n\n      switch (this.attribute('type').valueOrDefault('matrix')) {\n        // http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement\n        case 'saturate':\n          var s = matrix[0];\n          matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          break;\n\n        case 'hueRotate':\n          var a = matrix[0] * Math.PI / 180.0;\n\n          var c = function c(m1, m2, m3) {\n            return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;\n          };\n\n          matrix = [c(0.213, 0.787, -0.213), c(0.715, -0.715, -0.715), c(0.072, -0.072, 0.928), 0, 0, c(0.213, -0.213, 0.143), c(0.715, 0.285, 0.140), c(0.072, -0.072, -0.283), 0, 0, c(0.213, -0.213, -0.787), c(0.715, -0.715, 0.715), c(0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\n          break;\n\n        case 'luminanceToAlpha':\n          matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];\n          break;\n      }\n\n      function imGet(img, x, y, width, height, rgba) {\n        return img[y * width * 4 + x * 4 + rgba];\n      }\n\n      function imSet(img, x, y, width, height, rgba, val) {\n        img[y * width * 4 + x * 4 + rgba] = val;\n      }\n\n      function m(i, v) {\n        var mi = matrix[i];\n        return mi * (mi < 0 ? v - 255 : v);\n      }\n\n      this.apply = function (ctx, x, y, width, height) {\n        // assuming x==0 && y==0 for now\n        var srcData = ctx.getImageData(0, 0, width, height);\n\n        for (var y = 0; y < height; y++) {\n          for (var x = 0; x < width; x++) {\n            var r = imGet(srcData.data, x, y, width, height, 0);\n            var g = imGet(srcData.data, x, y, width, height, 1);\n            var b = imGet(srcData.data, x, y, width, height, 2);\n            var a = imGet(srcData.data, x, y, width, height, 3);\n            imSet(srcData.data, x, y, width, height, 0, m(0, r) + m(1, g) + m(2, b) + m(3, a) + m(4, 1));\n            imSet(srcData.data, x, y, width, height, 1, m(5, r) + m(6, g) + m(7, b) + m(8, a) + m(9, 1));\n            imSet(srcData.data, x, y, width, height, 2, m(10, r) + m(11, g) + m(12, b) + m(13, a) + m(14, 1));\n            imSet(srcData.data, x, y, width, height, 3, m(15, r) + m(16, g) + m(17, b) + m(18, a) + m(19, 1));\n          }\n        }\n\n        ctx.clearRect(0, 0, width, height);\n        ctx.putImageData(srcData, 0, 0);\n      };\n    };\n\n    svg.Element.feColorMatrix.prototype = new svg.Element.ElementBase();\n\n    svg.Element.feGaussianBlur = function (node) {\n      this.base = svg.Element.ElementBase;\n      this.base(node);\n      this.blurRadius = Math.floor(this.attribute('stdDeviation').numValue());\n      this.extraFilterDistance = this.blurRadius;\n\n      this.apply = function (ctx, x, y, width, height) {\n        if (typeof stackBlurCanvasRGBA == 'undefined') {\n          svg.log('ERROR: StackBlur.js must be included for blur to work');\n          return;\n        } // StackBlur requires canvas be on document\n\n\n        ctx.canvas.id = svg.UniqueId();\n        ctx.canvas.style.display = 'none';\n        document.body.appendChild(ctx.canvas);\n        stackBlurCanvasRGBA(ctx.canvas.id, x, y, width, height, this.blurRadius);\n        document.body.removeChild(ctx.canvas);\n      };\n    };\n\n    svg.Element.feGaussianBlur.prototype = new svg.Element.ElementBase(); // title element, do nothing\n\n    svg.Element.title = function (node) {};\n\n    svg.Element.title.prototype = new svg.Element.ElementBase(); // desc element, do nothing\n\n    svg.Element.desc = function (node) {};\n\n    svg.Element.desc.prototype = new svg.Element.ElementBase();\n\n    svg.Element.MISSING = function (node) {\n      svg.log('ERROR: Element \\'' + node.nodeName + '\\' not yet implemented.');\n    };\n\n    svg.Element.MISSING.prototype = new svg.Element.ElementBase(); // element factory\n\n    svg.CreateElement = function (node) {\n      var className = node.nodeName.replace(/^[^:]+:/, ''); // remove namespace\n\n      className = className.replace(/\\-/g, ''); // remove dashes\n\n      var e = null;\n\n      if (typeof svg.Element[className] != 'undefined') {\n        e = new svg.Element[className](node);\n      } else {\n        e = new svg.Element.MISSING(node);\n      }\n\n      e.type = node.nodeName;\n      return e;\n    }; // load from url\n\n\n    svg.load = function (ctx, url) {\n      svg.loadXml(ctx, svg.ajax(url));\n    }; // load from xml\n\n\n    svg.loadXml = function (ctx, xml) {\n      svg.loadXmlDoc(ctx, svg.parseXml(xml));\n    };\n\n    svg.loadXmlDoc = function (ctx, dom) {\n      svg.init(ctx);\n\n      var mapXY = function mapXY(p) {\n        var e = ctx.canvas;\n\n        while (e) {\n          p.x -= e.offsetLeft;\n          p.y -= e.offsetTop;\n          e = e.offsetParent;\n        }\n\n        if (window.scrollX) p.x += window.scrollX;\n        if (window.scrollY) p.y += window.scrollY;\n        return p;\n      }; // bind mouse\n\n\n      if (svg.opts['ignoreMouse'] != true) {\n        ctx.canvas.onclick = function (e) {\n          var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));\n          svg.Mouse.onclick(p.x, p.y);\n        };\n\n        ctx.canvas.onmousemove = function (e) {\n          var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));\n          svg.Mouse.onmousemove(p.x, p.y);\n        };\n      }\n\n      var e = svg.CreateElement(dom.documentElement);\n      e.root = true;\n      e.addStylesFromStyleDefinition(); // render loop\n\n      var isFirstRender = true;\n\n      var draw = function draw() {\n        svg.ViewPort.Clear();\n        if (ctx.canvas.parentNode) svg.ViewPort.SetCurrent(ctx.canvas.parentNode.clientWidth, ctx.canvas.parentNode.clientHeight);\n\n        if (svg.opts['ignoreDimensions'] != true) {\n          // set canvas size\n          if (e.style('width').hasValue()) {\n            ctx.canvas.width = e.style('width').toPixels('x');\n            ctx.canvas.style.width = ctx.canvas.width + 'px';\n          }\n\n          if (e.style('height').hasValue()) {\n            ctx.canvas.height = e.style('height').toPixels('y');\n            ctx.canvas.style.height = ctx.canvas.height + 'px';\n          }\n        }\n\n        var cWidth = ctx.canvas.clientWidth || ctx.canvas.width;\n        var cHeight = ctx.canvas.clientHeight || ctx.canvas.height;\n\n        if (svg.opts['ignoreDimensions'] == true && e.style('width').hasValue() && e.style('height').hasValue()) {\n          cWidth = e.style('width').toPixels('x');\n          cHeight = e.style('height').toPixels('y');\n        }\n\n        svg.ViewPort.SetCurrent(cWidth, cHeight);\n        if (svg.opts['offsetX'] != null) e.attribute('x', true).value = svg.opts['offsetX'];\n        if (svg.opts['offsetY'] != null) e.attribute('y', true).value = svg.opts['offsetY'];\n\n        if (svg.opts['scaleWidth'] != null || svg.opts['scaleHeight'] != null) {\n          var xRatio = null,\n              yRatio = null,\n              viewBox = svg.ToNumberArray(e.attribute('viewBox').value);\n\n          if (svg.opts['scaleWidth'] != null) {\n            if (e.attribute('width').hasValue()) xRatio = e.attribute('width').toPixels('x') / svg.opts['scaleWidth'];else if (!isNaN(viewBox[2])) xRatio = viewBox[2] / svg.opts['scaleWidth'];\n          }\n\n          if (svg.opts['scaleHeight'] != null) {\n            if (e.attribute('height').hasValue()) yRatio = e.attribute('height').toPixels('y') / svg.opts['scaleHeight'];else if (!isNaN(viewBox[3])) yRatio = viewBox[3] / svg.opts['scaleHeight'];\n          }\n\n          if (xRatio == null) {\n            xRatio = yRatio;\n          }\n\n          if (yRatio == null) {\n            yRatio = xRatio;\n          }\n\n          e.attribute('width', true).value = svg.opts['scaleWidth'];\n          e.attribute('height', true).value = svg.opts['scaleHeight'];\n          e.style('transform', true, true).value += ' scale(' + 1.0 / xRatio + ',' + 1.0 / yRatio + ')';\n        } // clear and render\n\n\n        if (svg.opts['ignoreClear'] != true) {\n          ctx.clearRect(0, 0, cWidth, cHeight);\n        }\n\n        e.render(ctx);\n\n        if (isFirstRender) {\n          isFirstRender = false;\n          if (typeof svg.opts['renderCallback'] == 'function') svg.opts['renderCallback'](dom);\n        }\n      };\n\n      var waitingForImages = true;\n\n      if (svg.ImagesLoaded()) {\n        waitingForImages = false;\n        draw();\n      }\n\n      svg.intervalID = setInterval(function () {\n        var needUpdate = false;\n\n        if (waitingForImages && svg.ImagesLoaded()) {\n          waitingForImages = false;\n          needUpdate = true;\n        } // need update from mouse events?\n\n\n        if (svg.opts['ignoreMouse'] != true) {\n          needUpdate = needUpdate | svg.Mouse.hasEvents();\n        } // need update from animations?\n\n\n        if (svg.opts['ignoreAnimation'] != true) {\n          for (var i = 0; i < svg.Animations.length; i++) {\n            needUpdate = needUpdate | svg.Animations[i].update(1000 / svg.FRAMERATE);\n          }\n        } // need update from redraw?\n\n\n        if (typeof svg.opts['forceRedraw'] == 'function') {\n          if (svg.opts['forceRedraw']() == true) needUpdate = true;\n        } // render if needed\n\n\n        if (needUpdate) {\n          draw();\n          svg.Mouse.runEvents(); // run and clear our events\n        }\n      }, 1000 / svg.FRAMERATE);\n    };\n\n    svg.stop = function () {\n      if (svg.intervalID) {\n        clearInterval(svg.intervalID);\n      }\n    };\n\n    svg.Mouse = new function () {\n      this.events = [];\n\n      this.hasEvents = function () {\n        return this.events.length != 0;\n      };\n\n      this.onclick = function (x, y) {\n        this.events.push({\n          type: 'onclick',\n          x: x,\n          y: y,\n          run: function run(e) {\n            if (e.onclick) e.onclick();\n          }\n        });\n      };\n\n      this.onmousemove = function (x, y) {\n        this.events.push({\n          type: 'onmousemove',\n          x: x,\n          y: y,\n          run: function run(e) {\n            if (e.onmousemove) e.onmousemove();\n          }\n        });\n      };\n\n      this.eventElements = [];\n\n      this.checkPath = function (element, ctx) {\n        for (var i = 0; i < this.events.length; i++) {\n          var e = this.events[i];\n          if (ctx.isPointInPath && ctx.isPointInPath(e.x, e.y)) this.eventElements[i] = element;\n        }\n      };\n\n      this.checkBoundingBox = function (element, bb) {\n        for (var i = 0; i < this.events.length; i++) {\n          var e = this.events[i];\n          if (bb.isPointInBox(e.x, e.y)) this.eventElements[i] = element;\n        }\n      };\n\n      this.runEvents = function () {\n        svg.ctx.canvas.style.cursor = '';\n\n        for (var i = 0; i < this.events.length; i++) {\n          var e = this.events[i];\n          var element = this.eventElements[i];\n\n          while (element) {\n            e.run(element);\n            element = element.parent;\n          }\n        } // done running, clear\n\n\n        this.events = [];\n        this.eventElements = [];\n      };\n    }();\n    return svg;\n  }\n})();\n\nif (typeof CanvasRenderingContext2D != 'undefined') {\n  CanvasRenderingContext2D.prototype.drawSvg = function (s, dx, dy, dw, dh) {\n    canvg(this.canvas, s, {\n      ignoreMouse: true,\n      ignoreAnimation: true,\n      ignoreDimensions: true,\n      ignoreClear: true,\n      offsetX: dx,\n      offsetY: dy,\n      scaleWidth: dw,\n      scaleHeight: dh\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/libs/canvg.js\n");
/******/ })()
;